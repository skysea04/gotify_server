{"version":3,"sources":["config.ts","layout/Header.tsx","common/DefaultPage.tsx","common/LoadingSpinner.tsx","inject.tsx","snack/browserNotification.ts","layout/Navigation.tsx","common/ScrollUpButton.tsx","common/SettingsDialog.tsx","snack/SnackBarHandler.tsx","common/ConfirmDialog.tsx","message/extras.ts","common/ToggleVisibility.tsx","application/AddApplicationDialog.tsx","application/UpdateApplicationDialog.tsx","application/Applications.tsx","client/AddClientDialog.tsx","client/UpdateClientDialog.tsx","client/Clients.tsx","plugin/Plugins.tsx","common/Markdown.tsx","common/Container.tsx","plugin/PluginDetailView.tsx","user/Register.tsx","user/Login.tsx","message/Message.tsx","message/Messages.tsx","user/AddEditUserDialog.tsx","user/Users.tsx","common/ConnectionErrorBanner.tsx","layout/Layout.tsx","CurrentUser.ts","common/BaseStore.ts","application/AppStore.ts","message/WebSocketStore.ts","snack/SnackManager.ts","user/UserStore.ts","message/MessagesStore.ts","client/ClientStore.ts","plugin/PluginStore.ts","reactions.ts","index.tsx","apiAuth.ts","registerServiceWorker.ts"],"names":["config","url","register","version","commit","buildDate","window","get","key","Header","observer","this","props","classes","name","loggedIn","admin","toggleTheme","logout","style","setNavOpen","width","position","AppBar","className","appBar","Toolbar","toolbar","title","to","link","Typography","variant","titleName","color","href","renderButtons","IconButton","onClick","target","rel","showSettings","menuButtons","Hidden","smUp","implementation","icon","label","id","Component","ResponsiveButton","rest","Button","startIcon","withWidth","withStyles","theme","createStyles","zIndex","drawer","breakpoints","down","paddingBottom","justifyContent","flexWrap","display","flex","flexBasis","marginTop","order","up","paddingRight","textDecoration","withTheme","DefaultPage","rightControl","maxWidth","children","margin","Grid","container","spacing","item","xs","LoadingSpinner","textAlign","CircularProgress","size","inject","stores","node","mobxInject","InjectProvider","mayAllowPermission","Notify","needsPermission","isSupported","Notification","permission","closeAndFocus","event","parent","focus","location","close","closeAfterTimeout","setTimeout","Navigation","state","showRequestNotification","appStore","navOpen","apps","getItems","userApps","length","map","app","ListItem","button","ListItemText","primary","placeholderItems","disabled","root","paper","drawerPaper","Divider","align","requestPermission","console","log","setState","ResponsiveDrawer","Drawer","open","xsDown","height","minHeight","mixins","ScrollUpButton","opacity","scrollHandler","currentScrollPos","pageYOffset","nextState","Math","min","scrollUp","scrollTo","addEventListener","removeEventListener","Fab","bottom","right","SettingsDialog","pass","fClose","currentUser","Dialog","onClose","DialogTitle","DialogContent","TextField","autoFocus","type","value","onChange","e","fullWidth","DialogActions","Tooltip","changePassword","observable","SnackBarHandler","dispose","componentDidMount","reaction","snackManager","counter","onNewSnack","componentWillUnmount","openWhen","snackOpenSince","Date","now","MIN_VISIBLE_SNACK_TIME_IN_MS","closeCurrentSnack","openNextSnack","hasNext","next","current","message","duration","MAX_VISIBLE_SNACK_TIME_IN_MS","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","onExited","action","ConfirmDialog","text","fOnSubmit","DialogContentText","RenderMode","ToggleVisibility","visible","toggleVisibility","fontFamily","fontSize","AddDialog","description","submitEnabled","handleChange","bind","multiline","propertyName","UpdateDialog","initialName","initialDescription","Applications","uploadId","upload","refresh","uploadImage","click","onUploadImage","file","files","indexOf","alert","createDialog","deleteId","updateId","Paper","elevation","Table","TableHead","TableRow","TableCell","padding","TableBody","image","token","fUpload","fDelete","fEdit","noDelete","internal","ref","create","update","getByID","remove","Row","Avatar","src","alignItems","placement","Clients","clientStore","showDialog","clients","client","Plugins","pluginStore","plugins","plugin","enabled","fToggleStatus","changeEnabledState","Switch","checked","Markdown","gfm","PluginDetailView","pluginID","parseInt","match","params","pluginInfo","displayText","currentConfig","refreshFeatures","nextProps","Promise","all","refreshConfigurer","refreshDisplayer","capabilities","requestConfig","response","requestDisplay","Info","Build","initialConfig","save","newConfig","a","changeConfig","Subject","PanelWrapper","Icon","float","toLowerCase","trim","replace","ConfigurerPanel","unsavedChanges","options","mode","lineNumbers","_","_1","newConf","then","DisplayerPanel","PluginInfo","author","modulePath","website","license","join","RegistrationDialog","namePresent","passPresent","success","Login","login","preventDefault","username","password","registerButton","registerDialog","onSubmit","autoComplete","connectionErrorMessage","marginBottom","contentType","extras","extract","Object","keys","k","some","Plain","path","Message","getBoundingClientRect","renderContent","content","plainContent","date","wrapperPadding","imageWrapper","alt","messageContentWrapper","header","headerTitle","trash","component","React","PureComponent","marginRight","whiteSpace","wordBreak","overflow","Messages","appId","isLoadingMore","updateAllWithProps","messagesStore","exists","loadMore","updateAll","deleteMessage","removeSingle","renderMessage","heights","gutterBottom","onscroll","innerHeight","document","body","offsetHeight","checkIfLoadMore","messages","hasMore","canLoadMore","getName","hasMessages","refreshByApp","removeByApp","useWindowAsScrollContainer","preloadBatchSize","elementHeight","m","undefined","AddEditDialog","isEdit","FormControlLabel","control","handleChecked","UserRow","Users","userStore","editId","users","user","wrapper","ConnectionErrorBanner","retry","backgroundColor","lineHeight","localStorageThemeKey","themeMap","light","createMuiTheme","palette","dark","Layout","localStorageTheme","localStorage","getItem","currentTheme","setItem","authenticating","tryReconnect","flexDirection","CssBaseline","top","exact","render","tokenKey","CurrentUser","snack","tokenCache","reconnectTimeoutId","reconnectTime","localStorageToken","setToken","axios","post","catch","error","data","errorDescription","browser","detect","request","method","headers","Authorization","Base64","encode","resp","tryAuthenticate","reject","passThrough","status","connectionError","statusText","filter","forEach","delete","resolve","removeItem","quiet","clearTimeout","BaseStore","getByIDOrUndefined","Error","items","find","hasId","requestDelete","requestItems","AppStore","onDelete","formData","FormData","append","put","WebSocketStore","wsActive","ws","listen","callback","wsUrl","WebSocket","onerror","onmessage","JSON","parse","onclose","SnackManager","shift","push","UserStore","AllMessages","MessagesStore","loading","stateOf","emptyState","loaded","clear","fetchMessages","since","getUnCached","appToImage","reduce","appid","createTransformer","clearCache","createEmptyStatesForApps","array","nextSince","messageToDelete","index","findIndex","splice","pagedResult","paging","unshift","clearAll","removeFromList","ClientStore","createNoNotifcation","PluginStore","registerReactions","wsStore","loadAll","msg","publishSingleMessage","removeMarkdown","silent","notifyClick","notifyShow","show","priority","Audio","play","port","hostname","protocol","pathname","slashes","concat","endsWith","substring","lastIndexOf","prodUrl","initStores","interceptors","use","onbeforeunload","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ac0b82e7.chunk.js","sourcesContent":["import {IVersion} from './types';\n\nexport interface IConfig {\n    url: string;\n    register: boolean;\n    version: IVersion;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\ndeclare global {\n    interface Window {\n        config?: Partial<IConfig>;\n    }\n}\n\nconst config: IConfig = {\n    url: 'unset',\n    register: false,\n    version: {commit: 'unknown', buildDate: 'unknown', version: 'unknown'},\n    ...window.config,\n};\n\nexport function set<Key extends keyof IConfig>(key: Key, value: IConfig[Key]): void {\n    config[key] = value;\n}\n\nexport function get<K extends keyof IConfig>(key: K): IConfig[K] {\n    return config[key];\n}\n","import AppBar from '@material-ui/core/AppBar';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport {createStyles, Theme, WithStyles, withStyles} from '@material-ui/core/styles';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport AccountCircle from '@material-ui/icons/AccountCircle';\nimport Chat from '@material-ui/icons/Chat';\nimport DevicesOther from '@material-ui/icons/DevicesOther';\nimport ExitToApp from '@material-ui/icons/ExitToApp';\nimport Highlight from '@material-ui/icons/Highlight';\nimport GitHubIcon from '@material-ui/icons/GitHub';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport Apps from '@material-ui/icons/Apps';\nimport SupervisorAccount from '@material-ui/icons/SupervisorAccount';\nimport React, {Component, CSSProperties} from 'react';\nimport {Link} from 'react-router-dom';\nimport {observer} from 'mobx-react';\nimport {Hidden, PropTypes, withWidth} from '@material-ui/core';\nimport {Breakpoint} from '@material-ui/core/styles/createBreakpoints';\n\nconst styles = (theme: Theme) =>\n    createStyles({\n        appBar: {\n            zIndex: theme.zIndex.drawer + 1,\n            [theme.breakpoints.down('xs')]: {\n                paddingBottom: 10,\n            },\n        },\n        toolbar: {\n            justifyContent: 'space-between',\n            [theme.breakpoints.down('xs')]: {\n                flexWrap: 'wrap',\n            },\n        },\n        menuButtons: {\n            display: 'flex',\n            [theme.breakpoints.down('sm')]: {\n                flex: 1,\n            },\n            justifyContent: 'center',\n            [theme.breakpoints.down('xs')]: {\n                flexBasis: '100%',\n                marginTop: 5,\n                order: 1,\n                justifyContent: 'space-between',\n            },\n        },\n        title: {\n            [theme.breakpoints.up('md')]: {\n                flex: 1,\n            },\n            display: 'flex',\n            alignItems: 'center',\n        },\n        titleName: {\n            paddingRight: 10,\n        },\n        link: {\n            color: 'inherit',\n            textDecoration: 'none',\n        },\n    });\n\ntype Styles = WithStyles<'link' | 'menuButtons' | 'toolbar' | 'titleName' | 'title' | 'appBar'>;\n\ninterface IProps extends Styles {\n    loggedIn: boolean;\n    name: string;\n    admin: boolean;\n    version: string;\n    toggleTheme: VoidFunction;\n    showSettings: VoidFunction;\n    logout: VoidFunction;\n    style: CSSProperties;\n    width: Breakpoint;\n    setNavOpen: (open: boolean) => void;\n}\n\n@observer\nclass Header extends Component<IProps> {\n    public render() {\n        const {\n            classes,\n            version,\n            name,\n            loggedIn,\n            admin,\n            toggleTheme,\n            logout,\n            style,\n            setNavOpen,\n            width,\n        } = this.props;\n\n        const position = width === 'xs' ? 'sticky' : 'fixed';\n\n        return (\n            <AppBar position={position} style={style} className={classes.appBar}>\n                <Toolbar className={classes.toolbar}>\n                    <div className={classes.title}>\n                        <Link to=\"/\" className={classes.link}>\n                            <Typography variant=\"h5\" className={classes.titleName} color=\"inherit\">\n                                Gotify\n                            </Typography>\n                        </Link>\n                        <a\n                            href={'https://github.com/gotify/server/releases/tag/v' + version}\n                            className={classes.link}\n                        >\n                            <Typography variant=\"button\" color=\"inherit\">\n                                @{version}\n                            </Typography>\n                        </a>\n                    </div>\n                    {loggedIn && this.renderButtons(name, admin, logout, width, setNavOpen)}\n                    <div>\n                        <IconButton onClick={toggleTheme} color=\"inherit\">\n                            <Highlight />\n                        </IconButton>\n\n                        <a\n                            href=\"https://github.com/gotify/server\"\n                            className={classes.link}\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                        >\n                            <IconButton color=\"inherit\">\n                                <GitHubIcon />\n                            </IconButton>\n                        </a>\n                    </div>\n                </Toolbar>\n            </AppBar>\n        );\n    }\n\n    private renderButtons(\n        name: string,\n        admin: boolean,\n        logout: VoidFunction,\n        width: Breakpoint,\n        setNavOpen: (open: boolean) => void\n    ) {\n        const {classes, showSettings} = this.props;\n        return (\n            <div className={classes.menuButtons}>\n                <Hidden smUp implementation=\"css\">\n                    <ResponsiveButton\n                        icon={<MenuIcon />}\n                        onClick={() => setNavOpen(true)}\n                        label=\"menu\"\n                        width={width}\n                        color=\"inherit\"\n                    />\n                </Hidden>\n                {admin && (\n                    <Link className={classes.link} to=\"/users\" id=\"navigate-users\">\n                        <ResponsiveButton\n                            icon={<SupervisorAccount />}\n                            label=\"users\"\n                            width={width}\n                            color=\"inherit\"\n                        />\n                    </Link>\n                )}\n                <Link className={classes.link} to=\"/applications\" id=\"navigate-apps\">\n                    <ResponsiveButton icon={<Chat />} label=\"apps\" width={width} color=\"inherit\" />\n                </Link>\n                <Link className={classes.link} to=\"/clients\" id=\"navigate-clients\">\n                    <ResponsiveButton\n                        icon={<DevicesOther />}\n                        label=\"clients\"\n                        width={width}\n                        color=\"inherit\"\n                    />\n                </Link>\n                <Link className={classes.link} to=\"/plugins\" id=\"navigate-plugins\">\n                    <ResponsiveButton\n                        icon={<Apps />}\n                        label=\"plugins\"\n                        width={width}\n                        color=\"inherit\"\n                    />\n                </Link>\n                <ResponsiveButton\n                    icon={<AccountCircle />}\n                    label={name}\n                    onClick={showSettings}\n                    id=\"changepw\"\n                    width={width}\n                    color=\"inherit\"\n                />\n                <ResponsiveButton\n                    icon={<ExitToApp />}\n                    label=\"Logout\"\n                    onClick={logout}\n                    id=\"logout\"\n                    width={width}\n                    color=\"inherit\"\n                />\n            </div>\n        );\n    }\n}\n\nconst ResponsiveButton: React.FC<{\n    width: Breakpoint;\n    color: PropTypes.Color;\n    label: string;\n    id?: string;\n    onClick?: () => void;\n    icon: React.ReactNode;\n}> = ({width, icon, label, ...rest}) => {\n    if (width === 'xs' || width === 'sm') {\n        return <IconButton {...rest}>{icon}</IconButton>;\n    }\n    return (\n        <Button startIcon={icon} {...rest}>\n            {label}\n        </Button>\n    );\n};\n\nexport default withWidth()(withStyles(styles, {withTheme: true})(Header));\n","import Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport React, {FC} from 'react';\n\ninterface IProps {\n    title: string;\n    rightControl?: React.ReactNode;\n    maxWidth?: number;\n}\n\nconst DefaultPage: FC<IProps> = ({title, rightControl, maxWidth = 700, children}) => (\n    <main style={{margin: '0 auto', maxWidth}}>\n        <Grid container spacing={4}>\n            <Grid item xs={12} style={{display: 'flex', flexWrap: 'wrap'}}>\n                <Typography variant=\"h4\" style={{flex: 1}}>\n                    {title}\n                </Typography>\n                {rightControl}\n            </Grid>\n            {children}\n        </Grid>\n    </main>\n);\nexport default DefaultPage;\n","import CircularProgress from '@material-ui/core/CircularProgress';\nimport Grid from '@material-ui/core/Grid';\nimport React from 'react';\nimport DefaultPage from './DefaultPage';\n\nexport default function LoadingSpinner() {\n    return (\n        <DefaultPage title=\"\" maxWidth={250}>\n            <Grid item xs={12} style={{textAlign: 'center'}}>\n                <CircularProgress size={150} />\n            </Grid>\n        </DefaultPage>\n    );\n}\n","import * as React from 'react';\nimport {UserStore} from './user/UserStore';\nimport {SnackManager} from './snack/SnackManager';\nimport {MessagesStore} from './message/MessagesStore';\nimport {CurrentUser} from './CurrentUser';\nimport {ClientStore} from './client/ClientStore';\nimport {AppStore} from './application/AppStore';\nimport {inject as mobxInject, Provider} from 'mobx-react';\nimport {WebSocketStore} from './message/WebSocketStore';\nimport {PluginStore} from './plugin/PluginStore';\n\nexport interface StoreMapping {\n    userStore: UserStore;\n    snackManager: SnackManager;\n    messagesStore: MessagesStore;\n    currentUser: CurrentUser;\n    clientStore: ClientStore;\n    appStore: AppStore;\n    pluginStore: PluginStore;\n    wsStore: WebSocketStore;\n}\n\nexport type AllStores = Extract<keyof StoreMapping, string>;\nexport type Stores<T extends AllStores> = Pick<StoreMapping, T>;\n\nexport const inject =\n    <I extends AllStores>(...stores: I[]) =>\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    <P extends {}>(\n        node: React.ComponentType<P>\n    ): React.ComponentType<Pick<P, Exclude<keyof P, I>>> =>\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        mobxInject(...stores)(node) as any;\n\nexport const InjectProvider: React.FC<{stores: StoreMapping}> = ({children, stores}) => (\n    <Provider {...stores}>{children}</Provider>\n);\n","import Notify from 'notifyjs';\nimport removeMarkdown from 'remove-markdown';\nimport {IMessage} from '../types';\n\nexport function mayAllowPermission(): boolean {\n    return Notify.needsPermission && Notify.isSupported() && Notification.permission !== 'denied';\n}\n\nexport function requestPermission() {\n    if (Notify.needsPermission && Notify.isSupported()) {\n        Notify.requestPermission(\n            () => console.log('granted notification permissions'),\n            () => console.log('notification permission denied')\n        );\n    }\n}\n\nexport function notifyNewMessage(msg: IMessage) {\n    const notify = new Notify(msg.title, {\n        body: removeMarkdown(msg.message),\n        icon: msg.image,\n        silent: true,\n        notifyClick: closeAndFocus,\n        notifyShow: closeAfterTimeout,\n    });\n    notify.show();\n}\n\nfunction closeAndFocus(event: Event) {\n    if (window.parent) {\n        window.parent.focus();\n    }\n    window.focus();\n    window.location.href = '/';\n    const target = event.target as Notification;\n    target.close();\n}\n\nfunction closeAfterTimeout(event: Event) {\n    setTimeout(() => {\n        const target = event.target as Notification;\n        target.close();\n    }, 5000);\n}\n","import Divider from '@material-ui/core/Divider';\nimport Drawer from '@material-ui/core/Drawer';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport {StyleRules, Theme, WithStyles, withStyles} from '@material-ui/core/styles';\nimport React, {Component} from 'react';\nimport {Link} from 'react-router-dom';\nimport {observer} from 'mobx-react';\nimport {inject, Stores} from '../inject';\nimport {mayAllowPermission, requestPermission} from '../snack/browserNotification';\nimport {Button, Hidden, IconButton, Typography} from '@material-ui/core';\nimport {DrawerProps} from '@material-ui/core/Drawer/Drawer';\nimport CloseIcon from '@material-ui/icons/Close';\n\nconst styles = (theme: Theme): StyleRules<'root' | 'drawerPaper' | 'toolbar' | 'link'> => ({\n    root: {\n        height: '100%',\n    },\n    drawerPaper: {\n        position: 'relative',\n        width: 250,\n        minHeight: '100%',\n        height: '100vh',\n    },\n    toolbar: theme.mixins.toolbar,\n    link: {\n        color: 'inherit',\n        textDecoration: 'none',\n    },\n});\n\ntype Styles = WithStyles<'root' | 'drawerPaper' | 'toolbar' | 'link'>;\n\ninterface IProps {\n    loggedIn: boolean;\n    navOpen: boolean;\n    setNavOpen: (open: boolean) => void;\n}\n\n@observer\nclass Navigation extends Component<\n    IProps & Styles & Stores<'appStore'>,\n    {showRequestNotification: boolean}\n> {\n    public state = {showRequestNotification: mayAllowPermission()};\n\n    public render() {\n        const {classes, loggedIn, appStore, navOpen, setNavOpen} = this.props;\n        const {showRequestNotification} = this.state;\n        const apps = appStore.getItems();\n\n        const userApps =\n            apps.length === 0\n                ? null\n                : apps.map((app) => (\n                      <Link\n                          onClick={() => setNavOpen(false)}\n                          className={`${classes.link} item`}\n                          to={'/messages/' + app.id}\n                          key={app.id}\n                      >\n                          <ListItem button>\n                              <ListItemText primary={app.name} />\n                          </ListItem>\n                      </Link>\n                  ));\n\n        const placeholderItems = [\n            <ListItem button disabled key={-1}>\n                <ListItemText primary=\"Some Server\" />\n            </ListItem>,\n            <ListItem button disabled key={-2}>\n                <ListItemText primary=\"A Raspberry PI\" />\n            </ListItem>,\n        ];\n\n        return (\n            <ResponsiveDrawer\n                classes={{root: classes.root, paper: classes.drawerPaper}}\n                navOpen={navOpen}\n                setNavOpen={setNavOpen}\n                id=\"message-navigation\"\n            >\n                <div className={classes.toolbar} />\n                <Link className={classes.link} to=\"/\" onClick={() => setNavOpen(false)}>\n                    <ListItem button disabled={!loggedIn} className=\"all\">\n                        <ListItemText primary=\"All Messages\" />\n                    </ListItem>\n                </Link>\n                <Divider />\n                <div>{loggedIn ? userApps : placeholderItems}</div>\n                <Divider />\n                <Typography align=\"center\" style={{marginTop: 10}}>\n                    {showRequestNotification ? (\n                        <Button\n                            onClick={() => {\n                                requestPermission();\n                                this.setState({showRequestNotification: false});\n                            }}\n                        >\n                            Enable Notifications\n                        </Button>\n                    ) : null}\n                </Typography>\n            </ResponsiveDrawer>\n        );\n    }\n}\n\nconst ResponsiveDrawer: React.FC<\n    DrawerProps & {navOpen: boolean; setNavOpen: (open: boolean) => void}\n> = ({navOpen, setNavOpen, children, ...rest}) => (\n    <>\n        <Hidden smUp implementation=\"css\">\n            <Drawer variant=\"temporary\" open={navOpen} {...rest}>\n                <IconButton onClick={() => setNavOpen(false)}>\n                    <CloseIcon />\n                </IconButton>\n                {children}\n            </Drawer>\n        </Hidden>\n        <Hidden xsDown implementation=\"css\">\n            <Drawer variant=\"permanent\" {...rest}>\n                {children}\n            </Drawer>\n        </Hidden>\n    </>\n);\n\nexport default withStyles(styles, {withTheme: true})(inject('appStore')(Navigation));\n","import Fab from '@material-ui/core/Fab';\nimport KeyboardArrowUp from '@material-ui/icons/KeyboardArrowUp';\nimport React, {Component} from 'react';\n\nclass ScrollUpButton extends Component {\n    state = {\n        display: 'none',\n        opacity: 0,\n    };\n    componentDidMount() {\n        window.addEventListener('scroll', this.scrollHandler);\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('scroll', this.scrollHandler);\n    }\n\n    scrollHandler = () => {\n        const currentScrollPos = window.pageYOffset;\n        const opacity = Math.min(currentScrollPos / 500, 1);\n        const nextState = {display: currentScrollPos > 0 ? 'inherit' : 'none', opacity};\n        if (this.state.display !== nextState.display || this.state.opacity !== nextState.opacity) {\n            this.setState(nextState);\n        }\n    };\n\n    public render() {\n        return (\n            <Fab\n                color=\"primary\"\n                style={{\n                    position: 'fixed',\n                    bottom: '30px',\n                    right: '30px',\n                    zIndex: 100000,\n                    display: this.state.display,\n                    opacity: this.state.opacity,\n                }}\n                onClick={this.scrollUp}\n            >\n                <KeyboardArrowUp />\n            </Fab>\n        );\n    }\n\n    private scrollUp = () => window.scrollTo(0, 0);\n}\n\nexport default ScrollUpButton;\n","import Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport TextField from '@material-ui/core/TextField';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport React, {Component} from 'react';\nimport {observable} from 'mobx';\nimport {observer} from 'mobx-react';\nimport {inject, Stores} from '../inject';\n\ninterface IProps {\n    fClose: VoidFunction;\n}\n\n@observer\nclass SettingsDialog extends Component<IProps & Stores<'currentUser'>> {\n    @observable\n    private pass = '';\n\n    public render() {\n        const {pass} = this;\n        const {fClose, currentUser} = this.props;\n        const submitAndClose = () => {\n            currentUser.changePassword(pass);\n            fClose();\n        };\n        return (\n            <Dialog\n                open={true}\n                onClose={fClose}\n                aria-labelledby=\"form-dialog-title\"\n                id=\"changepw-dialog\"\n            >\n                <DialogTitle id=\"form-dialog-title\">Change Password</DialogTitle>\n                <DialogContent>\n                    <TextField\n                        className=\"newpass\"\n                        autoFocus\n                        margin=\"dense\"\n                        type=\"password\"\n                        label=\"New Password *\"\n                        value={pass}\n                        onChange={(e) => (this.pass = e.target.value)}\n                        fullWidth\n                    />\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={fClose}>Cancel</Button>\n                    <Tooltip title={pass.length !== 0 ? '' : 'Password is required'}>\n                        <div>\n                            <Button\n                                className=\"change\"\n                                disabled={pass.length === 0}\n                                onClick={submitAndClose}\n                                color=\"primary\"\n                                variant=\"contained\"\n                            >\n                                Change\n                            </Button>\n                        </div>\n                    </Tooltip>\n                </DialogActions>\n            </Dialog>\n        );\n    }\n}\n\nexport default inject('currentUser')(SettingsDialog);\n","import IconButton from '@material-ui/core/IconButton';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport Close from '@material-ui/icons/Close';\nimport React, {Component} from 'react';\nimport {observable, reaction} from 'mobx';\nimport {observer} from 'mobx-react';\nimport {inject, Stores} from '../inject';\n\n@observer\nclass SnackBarHandler extends Component<Stores<'snackManager'>> {\n    private static MAX_VISIBLE_SNACK_TIME_IN_MS = 6000;\n    private static MIN_VISIBLE_SNACK_TIME_IN_MS = 1000;\n\n    @observable\n    private open = false;\n    @observable\n    private openWhen = 0;\n\n    private dispose: () => void = () => {};\n\n    public componentDidMount = () =>\n        (this.dispose = reaction(() => this.props.snackManager.counter, this.onNewSnack));\n\n    public componentWillUnmount = () => this.dispose();\n\n    public render() {\n        const {message: current, hasNext} = this.props.snackManager;\n        const duration = hasNext()\n            ? SnackBarHandler.MIN_VISIBLE_SNACK_TIME_IN_MS\n            : SnackBarHandler.MAX_VISIBLE_SNACK_TIME_IN_MS;\n\n        return (\n            <Snackbar\n                anchorOrigin={{vertical: 'bottom', horizontal: 'left'}}\n                open={this.open}\n                autoHideDuration={duration}\n                onClose={this.closeCurrentSnack}\n                onExited={this.openNextSnack}\n                message={<span id=\"message-id\">{current}</span>}\n                action={\n                    <IconButton\n                        key=\"close\"\n                        aria-label=\"Close\"\n                        color=\"inherit\"\n                        onClick={this.closeCurrentSnack}\n                    >\n                        <Close />\n                    </IconButton>\n                }\n            />\n        );\n    }\n\n    private onNewSnack = () => {\n        const {open, openWhen} = this;\n\n        if (!open) {\n            this.openNextSnack();\n            return;\n        }\n\n        const snackOpenSince = Date.now() - openWhen;\n        if (snackOpenSince > SnackBarHandler.MIN_VISIBLE_SNACK_TIME_IN_MS) {\n            this.closeCurrentSnack();\n        } else {\n            setTimeout(\n                this.closeCurrentSnack,\n                SnackBarHandler.MIN_VISIBLE_SNACK_TIME_IN_MS - snackOpenSince\n            );\n        }\n    };\n\n    private openNextSnack = () => {\n        if (this.props.snackManager.hasNext()) {\n            this.open = true;\n            this.openWhen = Date.now();\n            this.props.snackManager.next();\n        }\n    };\n\n    private closeCurrentSnack = () => (this.open = false);\n}\n\nexport default inject('snackManager')(SnackBarHandler);\n","import Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport React from 'react';\n\ninterface IProps {\n    title: string;\n    text: string;\n    fClose: VoidFunction;\n    fOnSubmit: VoidFunction;\n}\n\nexport default function ConfirmDialog({title, text, fClose, fOnSubmit}: IProps) {\n    const submitAndClose = () => {\n        fOnSubmit();\n        fClose();\n    };\n    return (\n        <Dialog\n            open={true}\n            onClose={fClose}\n            aria-labelledby=\"form-dialog-title\"\n            className=\"confirm-dialog\"\n        >\n            <DialogTitle id=\"form-dialog-title\">{title}</DialogTitle>\n            <DialogContent>\n                <DialogContentText>{text}</DialogContentText>\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={fClose} className=\"cancel\">\n                    No\n                </Button>\n                <Button\n                    onClick={submitAndClose}\n                    autoFocus\n                    color=\"primary\"\n                    variant=\"contained\"\n                    className=\"confirm\"\n                >\n                    Yes\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n}\n","import {IMessageExtras} from '../types';\n\nexport enum RenderMode {\n    Markdown = 'text/markdown',\n    Plain = 'text/plain',\n}\n\nexport const contentType = (extras?: IMessageExtras): RenderMode => {\n    const type = extract(extras, 'client::display', 'contentType');\n    const valid = Object.keys(RenderMode)\n        .map((k) => RenderMode[k])\n        .some((mode) => mode === type);\n    return valid ? type : RenderMode.Plain;\n};\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst extract = (extras: IMessageExtras | undefined, key: string, path: string): any => {\n    if (!extras) {\n        return null;\n    }\n\n    if (!extras[key]) {\n        return null;\n    }\n\n    if (!extras[key][path]) {\n        return null;\n    }\n\n    return extras[key][path];\n};\n","import IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport Visibility from '@material-ui/icons/Visibility';\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\nimport React, {Component, CSSProperties} from 'react';\n\ninterface IProps {\n    value: string;\n    style?: CSSProperties;\n}\n\ninterface IState {\n    visible: boolean;\n}\n\nclass ToggleVisibility extends Component<IProps, IState> {\n    public state = {visible: false};\n\n    public render() {\n        const {value, style} = this.props;\n        const text = this.state.visible ? value : '•••••••••••••••';\n        return (\n            <div style={style}>\n                <IconButton onClick={this.toggleVisibility} className=\"toggle-visibility\">\n                    {this.state.visible ? <VisibilityOff /> : <Visibility />}\n                </IconButton>\n                <Typography style={{fontFamily: 'monospace', fontSize: 16}}>{text}</Typography>\n            </div>\n        );\n    }\n\n    private toggleVisibility = () => this.setState({visible: !this.state.visible});\n}\n\nexport default ToggleVisibility;\n","import Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport TextField from '@material-ui/core/TextField';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport React, {Component} from 'react';\n\ninterface IProps {\n    fClose: VoidFunction;\n    fOnSubmit: (name: string, description: string) => void;\n}\n\ninterface IState {\n    name: string;\n    description: string;\n}\n\nexport default class AddDialog extends Component<IProps, IState> {\n    public state = {name: '', description: ''};\n\n    public render() {\n        const {fClose, fOnSubmit} = this.props;\n        const {name, description} = this.state;\n        const submitEnabled = this.state.name.length !== 0;\n        const submitAndClose = () => {\n            fOnSubmit(name, description);\n            fClose();\n        };\n        return (\n            <Dialog\n                open={true}\n                onClose={fClose}\n                aria-labelledby=\"form-dialog-title\"\n                id=\"app-dialog\"\n            >\n                <DialogTitle id=\"form-dialog-title\">Create an application</DialogTitle>\n                <DialogContent>\n                    <DialogContentText>\n                        An application is allowed to send messages.\n                    </DialogContentText>\n                    <TextField\n                        autoFocus\n                        margin=\"dense\"\n                        className=\"name\"\n                        label=\"Name *\"\n                        type=\"text\"\n                        value={name}\n                        onChange={this.handleChange.bind(this, 'name')}\n                        fullWidth\n                    />\n                    <TextField\n                        margin=\"dense\"\n                        className=\"description\"\n                        label=\"Short Description\"\n                        value={description}\n                        onChange={this.handleChange.bind(this, 'description')}\n                        fullWidth\n                        multiline\n                    />\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={fClose}>Cancel</Button>\n                    <Tooltip title={submitEnabled ? '' : 'name is required'}>\n                        <div>\n                            <Button\n                                className=\"create\"\n                                disabled={!submitEnabled}\n                                onClick={submitAndClose}\n                                color=\"primary\"\n                                variant=\"contained\"\n                            >\n                                Create\n                            </Button>\n                        </div>\n                    </Tooltip>\n                </DialogActions>\n            </Dialog>\n        );\n    }\n\n    private handleChange(propertyName: string, event: React.ChangeEvent<HTMLInputElement>) {\n        const state = this.state;\n        state[propertyName] = event.target.value;\n        this.setState(state);\n    }\n}\n","import Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport TextField from '@material-ui/core/TextField';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport React, {Component} from 'react';\n\ninterface IProps {\n    fClose: VoidFunction;\n    fOnSubmit: (name: string, description: string) => void;\n    initialName: string;\n    initialDescription: string;\n}\n\ninterface IState {\n    name: string;\n    description: string;\n}\n\nexport default class UpdateDialog extends Component<IProps, IState> {\n    public state = {name: '', description: ''};\n\n    constructor(props: IProps) {\n        super(props);\n        this.state = {\n            name: props.initialName,\n            description: props.initialDescription,\n        };\n    }\n\n    public render() {\n        const {fClose, fOnSubmit} = this.props;\n        const {name, description} = this.state;\n        const submitEnabled = this.state.name.length !== 0;\n        const submitAndClose = () => {\n            fOnSubmit(name, description);\n            fClose();\n        };\n        return (\n            <Dialog\n                open={true}\n                onClose={fClose}\n                aria-labelledby=\"form-dialog-title\"\n                id=\"app-dialog\"\n            >\n                <DialogTitle id=\"form-dialog-title\">Update an application</DialogTitle>\n                <DialogContent>\n                    <DialogContentText>\n                        An application is allowed to send messages.\n                    </DialogContentText>\n                    <TextField\n                        autoFocus\n                        margin=\"dense\"\n                        className=\"name\"\n                        label=\"Name *\"\n                        type=\"text\"\n                        value={name}\n                        onChange={this.handleChange.bind(this, 'name')}\n                        fullWidth\n                    />\n                    <TextField\n                        margin=\"dense\"\n                        className=\"description\"\n                        label=\"Short Description\"\n                        value={description}\n                        onChange={this.handleChange.bind(this, 'description')}\n                        fullWidth\n                        multiline\n                    />\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={fClose}>Cancel</Button>\n                    <Tooltip title={submitEnabled ? '' : 'name is required'}>\n                        <div>\n                            <Button\n                                className=\"update\"\n                                disabled={!submitEnabled}\n                                onClick={submitAndClose}\n                                color=\"primary\"\n                                variant=\"contained\"\n                            >\n                                Update\n                            </Button>\n                        </div>\n                    </Tooltip>\n                </DialogActions>\n            </Dialog>\n        );\n    }\n\n    private handleChange(propertyName: string, event: React.ChangeEvent<HTMLInputElement>) {\n        const state = this.state;\n        state[propertyName] = event.target.value;\n        this.setState(state);\n    }\n}\n","import Avatar from '@material-ui/core/Avatar';\nimport Grid from '@material-ui/core/Grid';\nimport IconButton from '@material-ui/core/IconButton';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Delete from '@material-ui/icons/Delete';\nimport Edit from '@material-ui/icons/Edit';\nimport CloudUpload from '@material-ui/icons/CloudUpload';\nimport React, {ChangeEvent, Component, SFC} from 'react';\nimport ConfirmDialog from '../common/ConfirmDialog';\nimport DefaultPage from '../common/DefaultPage';\nimport Button from '@material-ui/core/Button';\nimport ToggleVisibility from '../common/ToggleVisibility';\nimport AddApplicationDialog from './AddApplicationDialog';\nimport {observer} from 'mobx-react';\nimport {observable} from 'mobx';\nimport {inject, Stores} from '../inject';\nimport * as config from '../config';\nimport UpdateDialog from './UpdateApplicationDialog';\nimport {IApplication} from '../types';\n\n@observer\nclass Applications extends Component<Stores<'appStore'>> {\n    @observable\n    private deleteId: number | false = false;\n    @observable\n    private updateId: number | false = false;\n    @observable\n    private createDialog = false;\n\n    private uploadId = -1;\n    private upload: HTMLInputElement | null = null;\n\n    public componentDidMount = () => this.props.appStore.refresh();\n\n    public render() {\n        const {\n            createDialog,\n            deleteId,\n            updateId,\n            props: {appStore},\n        } = this;\n        const apps = appStore.getItems();\n        return (\n            <DefaultPage\n                title=\"Applications\"\n                rightControl={\n                    <Button\n                        id=\"create-app\"\n                        variant=\"contained\"\n                        color=\"primary\"\n                        onClick={() => (this.createDialog = true)}\n                    >\n                        Create Application\n                    </Button>\n                }\n                maxWidth={1000}\n            >\n                <Grid item xs={12}>\n                    <Paper elevation={6}>\n                        <Table id=\"app-table\">\n                            <TableHead>\n                                <TableRow>\n                                    <TableCell padding=\"checkbox\" style={{width: 80}} />\n                                    <TableCell>Name</TableCell>\n                                    <TableCell>Token</TableCell>\n                                    <TableCell>Description</TableCell>\n                                    <TableCell />\n                                    <TableCell />\n                                </TableRow>\n                            </TableHead>\n                            <TableBody>\n                                {apps.map((app: IApplication) => (\n                                    <Row\n                                        key={app.id}\n                                        description={app.description}\n                                        image={app.image}\n                                        name={app.name}\n                                        value={app.token}\n                                        fUpload={() => this.uploadImage(app.id)}\n                                        fDelete={() => (this.deleteId = app.id)}\n                                        fEdit={() => (this.updateId = app.id)}\n                                        noDelete={app.internal}\n                                    />\n                                ))}\n                            </TableBody>\n                        </Table>\n                        <input\n                            ref={(upload) => (this.upload = upload)}\n                            type=\"file\"\n                            style={{display: 'none'}}\n                            onChange={this.onUploadImage}\n                        />\n                    </Paper>\n                </Grid>\n                {createDialog && (\n                    <AddApplicationDialog\n                        fClose={() => (this.createDialog = false)}\n                        fOnSubmit={appStore.create}\n                    />\n                )}\n                {updateId !== false && (\n                    <UpdateDialog\n                        fClose={() => (this.updateId = false)}\n                        fOnSubmit={(name, description) =>\n                            appStore.update(updateId, name, description)\n                        }\n                        initialDescription={appStore.getByID(updateId).description}\n                        initialName={appStore.getByID(updateId).name}\n                    />\n                )}\n                {deleteId !== false && (\n                    <ConfirmDialog\n                        title=\"Confirm Delete\"\n                        text={'Delete ' + appStore.getByID(deleteId).name + '?'}\n                        fClose={() => (this.deleteId = false)}\n                        fOnSubmit={() => appStore.remove(deleteId)}\n                    />\n                )}\n            </DefaultPage>\n        );\n    }\n\n    private uploadImage = (id: number) => {\n        this.uploadId = id;\n        if (this.upload) {\n            this.upload.click();\n        }\n    };\n\n    private onUploadImage = (e: ChangeEvent<HTMLInputElement>) => {\n        const file = e.target.files?.[0];\n        if (!file) {\n            return;\n        }\n        if (['image/png', 'image/jpeg', 'image/gif'].indexOf(file.type) !== -1) {\n            this.props.appStore.uploadImage(this.uploadId, file);\n        } else {\n            alert('Uploaded file must be of type png, jpeg or gif.');\n        }\n    };\n}\n\ninterface IRowProps {\n    name: string;\n    value: string;\n    noDelete: boolean;\n    description: string;\n    fUpload: VoidFunction;\n    image: string;\n    fDelete: VoidFunction;\n    fEdit: VoidFunction;\n}\n\nconst Row: SFC<IRowProps> = observer(\n    ({name, value, noDelete, description, fDelete, fUpload, image, fEdit}) => (\n        <TableRow>\n            <TableCell padding=\"default\">\n                <div style={{display: 'flex'}}>\n                    <Avatar src={config.get('url') + image} />\n                    <IconButton onClick={fUpload} style={{height: 40}}>\n                        <CloudUpload />\n                    </IconButton>\n                </div>\n            </TableCell>\n            <TableCell>{name}</TableCell>\n            <TableCell>\n                <ToggleVisibility value={value} style={{display: 'flex', alignItems: 'center'}} />\n            </TableCell>\n            <TableCell>{description}</TableCell>\n            <TableCell align=\"right\" padding=\"none\">\n                <IconButton onClick={fEdit} className=\"edit\">\n                    <Edit />\n                </IconButton>\n            </TableCell>\n            <TableCell align=\"right\" padding=\"none\">\n                <IconButton onClick={fDelete} className=\"delete\" disabled={noDelete}>\n                    <Delete />\n                </IconButton>\n            </TableCell>\n        </TableRow>\n    )\n);\n\nexport default inject('appStore')(Applications);\n","import Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport TextField from '@material-ui/core/TextField';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport React, {Component} from 'react';\n\ninterface IProps {\n    fClose: VoidFunction;\n    fOnSubmit: (name: string) => void;\n}\n\nexport default class AddDialog extends Component<IProps, {name: string}> {\n    public state = {name: ''};\n\n    public render() {\n        const {fClose, fOnSubmit} = this.props;\n        const {name} = this.state;\n        const submitEnabled = this.state.name.length !== 0;\n        const submitAndClose = () => {\n            fOnSubmit(name);\n            fClose();\n        };\n        return (\n            <Dialog\n                open={true}\n                onClose={fClose}\n                aria-labelledby=\"form-dialog-title\"\n                id=\"client-dialog\"\n            >\n                <DialogTitle id=\"form-dialog-title\">Create a client</DialogTitle>\n                <DialogContent>\n                    <TextField\n                        autoFocus\n                        margin=\"dense\"\n                        className=\"name\"\n                        label=\"Name *\"\n                        type=\"email\"\n                        value={name}\n                        onChange={this.handleChange.bind(this, 'name')}\n                        fullWidth\n                    />\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={fClose}>Cancel</Button>\n                    <Tooltip\n                        placement={'bottom-start'}\n                        title={submitEnabled ? '' : 'name is required'}\n                    >\n                        <div>\n                            <Button\n                                className=\"create\"\n                                disabled={!submitEnabled}\n                                onClick={submitAndClose}\n                                color=\"primary\"\n                                variant=\"contained\"\n                            >\n                                Create\n                            </Button>\n                        </div>\n                    </Tooltip>\n                </DialogActions>\n            </Dialog>\n        );\n    }\n\n    private handleChange(propertyName: string, event: React.ChangeEvent<HTMLInputElement>) {\n        const state = this.state;\n        state[propertyName] = event.target.value;\n        this.setState(state);\n    }\n}\n","import Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport TextField from '@material-ui/core/TextField';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport React, {Component} from 'react';\n\ninterface IProps {\n    fClose: VoidFunction;\n    fOnSubmit: (name: string) => void;\n    initialName: string;\n}\n\ninterface IState {\n    name: string;\n}\n\nexport default class UpdateDialog extends Component<IProps, IState> {\n    public state = {name: ''};\n\n    constructor(props: IProps) {\n        super(props);\n        this.state = {\n            name: props.initialName,\n        };\n    }\n\n    public render() {\n        const {fClose, fOnSubmit} = this.props;\n        const {name} = this.state;\n        const submitEnabled = this.state.name.length !== 0;\n        const submitAndClose = () => {\n            fOnSubmit(name);\n            fClose();\n        };\n        return (\n            <Dialog\n                open={true}\n                onClose={fClose}\n                aria-labelledby=\"form-dialog-title\"\n                id=\"client-dialog\"\n            >\n                <DialogTitle id=\"form-dialog-title\">Update a Client</DialogTitle>\n                <DialogContent>\n                    <DialogContentText>\n                        A client manages messages, clients, applications and users (with admin\n                        permissions).\n                    </DialogContentText>\n                    <TextField\n                        autoFocus\n                        margin=\"dense\"\n                        className=\"name\"\n                        label=\"Name *\"\n                        type=\"text\"\n                        value={name}\n                        onChange={this.handleChange.bind(this, 'name')}\n                        fullWidth\n                    />\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={fClose}>Cancel</Button>\n                    <Tooltip title={submitEnabled ? '' : 'name is required'}>\n                        <div>\n                            <Button\n                                className=\"update\"\n                                disabled={!submitEnabled}\n                                onClick={submitAndClose}\n                                color=\"primary\"\n                                variant=\"contained\"\n                            >\n                                Update\n                            </Button>\n                        </div>\n                    </Tooltip>\n                </DialogActions>\n            </Dialog>\n        );\n    }\n\n    private handleChange(propertyName: string, event: React.ChangeEvent<HTMLInputElement>) {\n        const state = {};\n        state[propertyName] = event.target.value;\n        this.setState(state);\n    }\n}\n","import Grid from '@material-ui/core/Grid';\nimport IconButton from '@material-ui/core/IconButton';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Delete from '@material-ui/icons/Delete';\nimport Edit from '@material-ui/icons/Edit';\nimport React, {Component, SFC} from 'react';\nimport ConfirmDialog from '../common/ConfirmDialog';\nimport DefaultPage from '../common/DefaultPage';\nimport Button from '@material-ui/core/Button';\nimport ToggleVisibility from '../common/ToggleVisibility';\nimport AddClientDialog from './AddClientDialog';\nimport UpdateDialog from './UpdateClientDialog';\nimport {observer} from 'mobx-react';\nimport {observable} from 'mobx';\nimport {inject, Stores} from '../inject';\nimport {IClient} from '../types';\n\n@observer\nclass Clients extends Component<Stores<'clientStore'>> {\n    @observable\n    private showDialog = false;\n    @observable\n    private deleteId: false | number = false;\n    @observable\n    private updateId: false | number = false;\n\n    public componentDidMount = () => this.props.clientStore.refresh();\n\n    public render() {\n        const {\n            deleteId,\n            updateId,\n            showDialog,\n            props: {clientStore},\n        } = this;\n        const clients = clientStore.getItems();\n\n        return (\n            <DefaultPage\n                title=\"Clients\"\n                rightControl={\n                    <Button\n                        id=\"create-client\"\n                        variant=\"contained\"\n                        color=\"primary\"\n                        onClick={() => (this.showDialog = true)}\n                    >\n                        Create Client\n                    </Button>\n                }\n            >\n                <Grid item xs={12}>\n                    <Paper elevation={6}>\n                        <Table id=\"client-table\">\n                            <TableHead>\n                                <TableRow style={{textAlign: 'center'}}>\n                                    <TableCell>Name</TableCell>\n                                    <TableCell style={{width: 200}}>Token</TableCell>\n                                    <TableCell />\n                                    <TableCell />\n                                </TableRow>\n                            </TableHead>\n                            <TableBody>\n                                {clients.map((client: IClient) => (\n                                    <Row\n                                        key={client.id}\n                                        name={client.name}\n                                        value={client.token}\n                                        fEdit={() => (this.updateId = client.id)}\n                                        fDelete={() => (this.deleteId = client.id)}\n                                    />\n                                ))}\n                            </TableBody>\n                        </Table>\n                    </Paper>\n                </Grid>\n                {showDialog && (\n                    <AddClientDialog\n                        fClose={() => (this.showDialog = false)}\n                        fOnSubmit={clientStore.create}\n                    />\n                )}\n                {updateId !== false && (\n                    <UpdateDialog\n                        fClose={() => (this.updateId = false)}\n                        fOnSubmit={(name) => clientStore.update(updateId, name)}\n                        initialName={clientStore.getByID(updateId).name}\n                    />\n                )}\n                {deleteId !== false && (\n                    <ConfirmDialog\n                        title=\"Confirm Delete\"\n                        text={'Delete ' + clientStore.getByID(deleteId).name + '?'}\n                        fClose={() => (this.deleteId = false)}\n                        fOnSubmit={() => clientStore.remove(deleteId)}\n                    />\n                )}\n            </DefaultPage>\n        );\n    }\n}\n\ninterface IRowProps {\n    name: string;\n    value: string;\n    fEdit: VoidFunction;\n    fDelete: VoidFunction;\n}\n\nconst Row: SFC<IRowProps> = ({name, value, fEdit, fDelete}) => (\n    <TableRow>\n        <TableCell>{name}</TableCell>\n        <TableCell>\n            <ToggleVisibility\n                value={value}\n                style={{display: 'flex', alignItems: 'center', width: 200}}\n            />\n        </TableCell>\n        <TableCell align=\"right\" padding=\"none\">\n            <IconButton onClick={fEdit} className=\"edit\">\n                <Edit />\n            </IconButton>\n        </TableCell>\n        <TableCell align=\"right\" padding=\"none\">\n            <IconButton onClick={fDelete} className=\"delete\">\n                <Delete />\n            </IconButton>\n        </TableCell>\n    </TableRow>\n);\n\nexport default inject('clientStore')(Clients);\n","import React, {Component, SFC} from 'react';\nimport {Link} from 'react-router-dom';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Settings from '@material-ui/icons/Settings';\nimport {Switch, Button} from '@material-ui/core';\nimport DefaultPage from '../common/DefaultPage';\nimport ToggleVisibility from '../common/ToggleVisibility';\nimport {observer} from 'mobx-react';\nimport {inject, Stores} from '../inject';\nimport {IPlugin} from '../types';\n\n@observer\nclass Plugins extends Component<Stores<'pluginStore'>> {\n    public componentDidMount = () => this.props.pluginStore.refresh();\n\n    public render() {\n        const {\n            props: {pluginStore},\n        } = this;\n        const plugins = pluginStore.getItems();\n        return (\n            <DefaultPage title=\"Plugins\" maxWidth={1000}>\n                <Grid item xs={12}>\n                    <Paper elevation={6}>\n                        <Table id=\"plugin-table\">\n                            <TableHead>\n                                <TableRow>\n                                    <TableCell>ID</TableCell>\n                                    <TableCell>Enabled</TableCell>\n                                    <TableCell>Name</TableCell>\n                                    <TableCell>Token</TableCell>\n                                    <TableCell>Details</TableCell>\n                                </TableRow>\n                            </TableHead>\n                            <TableBody>\n                                {plugins.map((plugin: IPlugin) => (\n                                    <Row\n                                        key={plugin.token}\n                                        id={plugin.id}\n                                        token={plugin.token}\n                                        name={plugin.name}\n                                        enabled={plugin.enabled}\n                                        fToggleStatus={() =>\n                                            this.props.pluginStore.changeEnabledState(\n                                                plugin.id,\n                                                !plugin.enabled\n                                            )\n                                        }\n                                    />\n                                ))}\n                            </TableBody>\n                        </Table>\n                    </Paper>\n                </Grid>\n            </DefaultPage>\n        );\n    }\n}\n\ninterface IRowProps {\n    id: number;\n    name: string;\n    token: string;\n    enabled: boolean;\n    fToggleStatus: VoidFunction;\n}\n\nconst Row: SFC<IRowProps> = observer(({name, id, token, enabled, fToggleStatus}) => (\n    <TableRow>\n        <TableCell>{id}</TableCell>\n        <TableCell>\n            <Switch\n                checked={enabled}\n                onClick={fToggleStatus}\n                className=\"switch\"\n                data-enabled={enabled}\n            />\n        </TableCell>\n        <TableCell>{name}</TableCell>\n        <TableCell>\n            <ToggleVisibility value={token} style={{display: 'flex', alignItems: 'center'}} />\n        </TableCell>\n        <TableCell align=\"right\" padding=\"none\">\n            <Link to={'/plugins/' + id}>\n                <Button>\n                    <Settings />\n                </Button>\n            </Link>\n        </TableCell>\n    </TableRow>\n));\n\nexport default inject('pluginStore')(Plugins);\n","import React from 'react';\nimport ReactMarkdown from 'react-markdown';\nimport gfm from 'remark-gfm';\n\nexport const Markdown = ({children}: {children: string}) => (\n    <ReactMarkdown plugins={[gfm]}>{children}</ReactMarkdown>\n);\n","import Paper from '@material-ui/core/Paper';\nimport {withStyles, WithStyles} from '@material-ui/core/styles';\nimport * as React from 'react';\n\nconst styles = () => ({\n    paper: {\n        padding: 16,\n    },\n});\n\ninterface IProps extends WithStyles<'paper'> {\n    style?: React.CSSProperties;\n}\n\nconst Container: React.FC<IProps> = ({classes, children, style}) => (\n    <Paper elevation={6} className={classes.paper} style={style}>\n        {children}\n    </Paper>\n);\n\nexport default withStyles(styles)(Container);\n","import React, {Component} from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport {Markdown} from '../common/Markdown';\nimport {UnControlled as CodeMirror} from 'react-codemirror2';\nimport 'codemirror/lib/codemirror.css';\nimport 'codemirror/theme/material.css';\nimport 'codemirror/mode/yaml/yaml';\nimport Info from '@material-ui/icons/Info';\nimport Build from '@material-ui/icons/Build';\nimport Subject from '@material-ui/icons/Subject';\nimport Refresh from '@material-ui/icons/Refresh';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport DefaultPage from '../common/DefaultPage';\nimport * as config from '../config';\nimport Container from '../common/Container';\nimport {inject, Stores} from '../inject';\nimport {IPlugin} from '../types';\n\ntype IProps = RouteComponentProps<{id: string}>;\n\ninterface IState {\n    displayText: string | null;\n    currentConfig: string | null;\n}\n\nclass PluginDetailView extends Component<IProps & Stores<'pluginStore'>, IState> {\n    private pluginID: number = parseInt(this.props.match.params.id, 10);\n    private pluginInfo = () => this.props.pluginStore.getByID(this.pluginID);\n\n    public state: IState = {\n        displayText: null,\n        currentConfig: null,\n    };\n\n    public componentWillMount() {\n        this.refreshFeatures();\n    }\n\n    public componentWillReceiveProps(nextProps: IProps & Stores<'pluginStore'>) {\n        this.pluginID = parseInt(nextProps.match.params.id, 10);\n        this.refreshFeatures();\n    }\n\n    private refreshFeatures() {\n        return Promise.all([this.refreshConfigurer(), this.refreshDisplayer()]);\n    }\n\n    private async refreshConfigurer() {\n        const {\n            props: {pluginStore},\n        } = this;\n        if (this.pluginInfo().capabilities.indexOf('configurer') !== -1) {\n            const response = await pluginStore.requestConfig(this.pluginID);\n            this.setState({currentConfig: response});\n        }\n    }\n\n    private async refreshDisplayer() {\n        const {\n            props: {pluginStore},\n        } = this;\n        if (this.pluginInfo().capabilities.indexOf('displayer') !== -1) {\n            const response = await pluginStore.requestDisplay(this.pluginID);\n            this.setState({displayText: response});\n        }\n    }\n\n    public render() {\n        const pluginInfo = this.pluginInfo();\n        const {name, capabilities} = pluginInfo;\n        return (\n            <DefaultPage title={name} maxWidth={1000}>\n                <PanelWrapper name={'Plugin Info'} icon={Info}>\n                    <PluginInfo pluginInfo={pluginInfo} />\n                </PanelWrapper>\n                {capabilities.indexOf('configurer') !== -1 ? (\n                    <PanelWrapper\n                        name={'Configurer'}\n                        description={'This is the configuration panel for this plugin.'}\n                        icon={Build}\n                        refresh={this.refreshConfigurer.bind(this)}\n                    >\n                        <ConfigurerPanel\n                            pluginInfo={pluginInfo}\n                            initialConfig={\n                                this.state.currentConfig !== null\n                                    ? this.state.currentConfig\n                                    : 'Loading...'\n                            }\n                            save={async (newConfig) => {\n                                await this.props.pluginStore.changeConfig(this.pluginID, newConfig);\n                                await this.refreshFeatures();\n                            }}\n                        />\n                    </PanelWrapper>\n                ) : null}{' '}\n                {capabilities.indexOf('displayer') !== -1 ? (\n                    <PanelWrapper\n                        name={'Displayer'}\n                        description={'This is the information generated by the plugin.'}\n                        refresh={this.refreshDisplayer.bind(this)}\n                        icon={Subject}\n                    >\n                        <DisplayerPanel\n                            pluginInfo={pluginInfo}\n                            displayText={\n                                this.state.displayText !== null\n                                    ? this.state.displayText\n                                    : 'Loading...'\n                            }\n                        />\n                    </PanelWrapper>\n                ) : null}\n            </DefaultPage>\n        );\n    }\n}\n\ninterface IPanelWrapperProps {\n    name: string;\n    description?: string;\n    refresh?: () => Promise<void>;\n    icon?: React.ComponentType;\n}\n\nconst PanelWrapper: React.FC<IPanelWrapperProps> = ({\n    name,\n    description,\n    refresh,\n    icon,\n    children,\n}) => {\n    const Icon = icon;\n    return (\n        <Container style={{display: 'block', width: '100%', margin: '20px'}}>\n            <Typography variant=\"h5\">\n                {Icon ? (\n                    <span>\n                        <Icon />\n                        &nbsp;\n                    </span>\n                ) : null}\n                {name}\n                {refresh ? (\n                    <Button\n                        style={{float: 'right'}}\n                        onClick={() => {\n                            refresh();\n                        }}\n                    >\n                        <Refresh />\n                    </Button>\n                ) : null}\n            </Typography>\n            {description ? <Typography variant=\"subtitle1\">{description}</Typography> : null}\n            <hr />\n            <div className={name.toLowerCase().trim().replace(/ /g, '-')}>{children}</div>\n        </Container>\n    );\n};\n\ninterface IConfigurerPanelProps {\n    pluginInfo: IPlugin;\n    initialConfig: string;\n    save: (newConfig: string) => Promise<void>;\n}\nclass ConfigurerPanel extends Component<IConfigurerPanelProps, {unsavedChanges: string | null}> {\n    public state = {unsavedChanges: null};\n\n    public render() {\n        return (\n            <div>\n                <CodeMirror\n                    value={this.props.initialConfig}\n                    options={{\n                        mode: 'yaml',\n                        theme: 'material',\n                        lineNumbers: true,\n                    }}\n                    onChange={(_, _1, value) => {\n                        let newConf: string | null = value;\n                        if (value === this.props.initialConfig) {\n                            newConf = null;\n                        }\n                        this.setState({unsavedChanges: newConf});\n                    }}\n                />\n                <br />\n                <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    fullWidth={true}\n                    disabled={\n                        this.state.unsavedChanges === null ||\n                        this.state.unsavedChanges === this.props.initialConfig\n                    }\n                    className=\"config-save\"\n                    onClick={() => {\n                        const newConfig = this.state.unsavedChanges;\n                        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                        this.props.save(newConfig!).then(() => {\n                            this.setState({unsavedChanges: null});\n                        });\n                    }}\n                >\n                    <Typography variant=\"button\">Save</Typography>\n                </Button>\n            </div>\n        );\n    }\n}\n\ninterface IDisplayerPanelProps {\n    pluginInfo: IPlugin;\n    displayText: string;\n}\nconst DisplayerPanel: React.FC<IDisplayerPanelProps> = ({displayText}) => (\n    <Typography variant=\"body2\">\n        <Markdown>{displayText}</Markdown>\n    </Typography>\n);\n\nclass PluginInfo extends Component<{pluginInfo: IPlugin}> {\n    public render() {\n        const {\n            props: {\n                pluginInfo: {name, author, modulePath, website, license, capabilities, id, token},\n            },\n        } = this;\n        return (\n            <div>\n                {name ? (\n                    <Typography variant=\"body2\" className=\"name\">\n                        Name: <span>{name}</span>\n                    </Typography>\n                ) : null}\n                {author ? (\n                    <Typography variant=\"body2\" className=\"author\">\n                        Author: <span>{author}</span>\n                    </Typography>\n                ) : null}\n                <Typography variant=\"body2\" className=\"module-path\">\n                    Module Path: <span>{modulePath}</span>\n                </Typography>\n                {website ? (\n                    <Typography variant=\"body2\" className=\"website\">\n                        Website: <span>{website}</span>\n                    </Typography>\n                ) : null}\n                {license ? (\n                    <Typography variant=\"body2\" className=\"license\">\n                        License: <span>{license}</span>\n                    </Typography>\n                ) : null}\n                <Typography variant=\"body2\" className=\"capabilities\">\n                    Capabilities: <span>{capabilities.join(', ')}</span>\n                </Typography>\n                {capabilities.indexOf('webhooker') !== -1 ? (\n                    <Typography variant=\"body2\">\n                        Custom Route Prefix:{' '}\n                        {((url) => (\n                            <a\n                                href={url}\n                                target=\"_blank\"\n                                rel=\"noopener noreferrer\"\n                                className=\"custom-route\"\n                            >\n                                {url}\n                            </a>\n                        ))(`${config.get('url')}plugin/${id}/custom/${token}/`)}\n                    </Typography>\n                ) : null}\n            </div>\n        );\n    }\n}\n\nexport default inject('pluginStore')(PluginDetailView);\n","import Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport TextField from '@material-ui/core/TextField';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport React, {ChangeEvent, Component} from 'react';\n\ninterface IProps {\n    name?: string;\n    fClose: VoidFunction;\n    fOnSubmit: (name: string, pass: string) => Promise<boolean>;\n}\n\ninterface IState {\n    name: string;\n    pass: string;\n}\n\nexport default class RegistrationDialog extends Component<IProps, IState> {\n    public state = {\n        name: '',\n        pass: '',\n    };\n\n    public render() {\n        const {fClose, fOnSubmit} = this.props;\n        const {name, pass} = this.state;\n        const namePresent = this.state.name.length !== 0;\n        const passPresent = this.state.pass.length !== 0;\n        const submitAndClose = (): void => {\n            fOnSubmit(name, pass).then((success) => {\n                if (success) {\n                    fClose();\n                }\n            });\n        };\n        return (\n            <Dialog\n                open={true}\n                onClose={fClose}\n                aria-labelledby=\"form-dialog-title\"\n                id=\"add-edit-user-dialog\"\n            >\n                <DialogTitle id=\"form-dialog-title\">Registration</DialogTitle>\n                <DialogContent>\n                    <TextField\n                        autoFocus\n                        margin=\"dense\"\n                        className=\"name\"\n                        label=\"Name *\"\n                        type=\"email\"\n                        value={name}\n                        onChange={this.handleChange.bind(this, 'name')}\n                        fullWidth\n                    />\n                    <TextField\n                        margin=\"dense\"\n                        className=\"password\"\n                        type=\"password\"\n                        value={pass}\n                        fullWidth\n                        label=\"Pass *\"\n                        onChange={this.handleChange.bind(this, 'pass')}\n                    />\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={fClose}>Cancel</Button>\n                    <Tooltip\n                        placement={'bottom-start'}\n                        title={\n                            namePresent\n                                ? passPresent\n                                    ? ''\n                                    : 'password is required'\n                                : 'name is required'\n                        }\n                    >\n                        <div>\n                            <Button\n                                className=\"save-create\"\n                                disabled={!passPresent || !namePresent}\n                                onClick={submitAndClose}\n                                color=\"primary\"\n                                variant=\"contained\"\n                            >\n                                Register\n                            </Button>\n                        </div>\n                    </Tooltip>\n                </DialogActions>\n            </Dialog>\n        );\n    }\n\n    private handleChange(propertyName: string, event: ChangeEvent<HTMLInputElement>) {\n        const state = this.state;\n        state[propertyName] = event.target.value;\n        this.setState(state);\n    }\n}\n","import Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport React, {Component, FormEvent} from 'react';\nimport Container from '../common/Container';\nimport DefaultPage from '../common/DefaultPage';\nimport {observable} from 'mobx';\nimport {observer} from 'mobx-react';\nimport {inject, Stores} from '../inject';\nimport * as config from '../config';\nimport RegistrationDialog from './Register';\n\n@observer\nclass Login extends Component<Stores<'currentUser'>> {\n    @observable\n    private username = '';\n    @observable\n    private password = '';\n    @observable\n    private registerDialog = false;\n\n    public render() {\n        const {username, password, registerDialog} = this;\n        return (\n            <DefaultPage title=\"Login\" rightControl={this.registerButton()} maxWidth={250}>\n                <Grid item xs={12} style={{textAlign: 'center'}}>\n                    <Container>\n                        <form onSubmit={this.preventDefault} id=\"login-form\">\n                            <TextField\n                                autoFocus\n                                className=\"name\"\n                                label=\"Username\"\n                                margin=\"dense\"\n                                autoComplete=\"username\"\n                                value={username}\n                                onChange={(e) => (this.username = e.target.value)}\n                            />\n                            <TextField\n                                type=\"password\"\n                                className=\"password\"\n                                label=\"Password\"\n                                margin=\"normal\"\n                                autoComplete=\"current-password\"\n                                value={password}\n                                onChange={(e) => (this.password = e.target.value)}\n                            />\n                            <Button\n                                type=\"submit\"\n                                variant=\"contained\"\n                                size=\"large\"\n                                className=\"login\"\n                                color=\"primary\"\n                                disabled={!!this.props.currentUser.connectionErrorMessage}\n                                style={{marginTop: 15, marginBottom: 5}}\n                                onClick={this.login}\n                            >\n                                Login\n                            </Button>\n                        </form>\n                    </Container>\n                </Grid>\n                {registerDialog && (\n                    <RegistrationDialog\n                        fClose={() => (this.registerDialog = false)}\n                        fOnSubmit={this.props.currentUser.register}\n                    />\n                )}\n            </DefaultPage>\n        );\n    }\n\n    private login = (e: React.MouseEvent<HTMLButtonElement>) => {\n        e.preventDefault();\n        this.props.currentUser.login(this.username, this.password);\n    };\n\n    private registerButton = () => {\n        if (config.get('register'))\n            return (\n                <Button\n                    id=\"register\"\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={() => (this.registerDialog = true)}\n                >\n                    Register\n                </Button>\n            );\n        else return null;\n    };\n\n    private preventDefault = (e: FormEvent<HTMLFormElement>) => e.preventDefault();\n}\n\nexport default inject('currentUser')(Login);\n","import IconButton from '@material-ui/core/IconButton';\nimport {createStyles, Theme, withStyles, WithStyles} from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Delete from '@material-ui/icons/Delete';\nimport React from 'react';\nimport TimeAgo from 'react-timeago';\nimport Container from '../common/Container';\nimport * as config from '../config';\nimport {Markdown} from '../common/Markdown';\nimport {RenderMode, contentType} from './extras';\nimport {IMessageExtras} from '../types';\n\nconst styles = (theme: Theme) =>\n    createStyles({\n        header: {\n            display: 'flex',\n            flexWrap: 'wrap',\n            marginBottom: 0,\n        },\n        headerTitle: {\n            flex: 1,\n        },\n        trash: {\n            marginTop: -15,\n            marginRight: -15,\n        },\n        wrapperPadding: {\n            padding: 12,\n        },\n        messageContentWrapper: {\n            width: '100%',\n            maxWidth: 585,\n        },\n        image: {\n            marginRight: 15,\n            [theme.breakpoints.down('sm')]: {\n                width: 32,\n                height: 32,\n            },\n        },\n        date: {\n            [theme.breakpoints.down('sm')]: {\n                order: 1,\n                flexBasis: '100%',\n                opacity: 0.7,\n            },\n        },\n        imageWrapper: {\n            display: 'flex',\n        },\n        plainContent: {\n            whiteSpace: 'pre-wrap',\n        },\n        content: {\n            wordBreak: 'break-all',\n            '& p': {\n                margin: 0,\n            },\n            '& a': {\n                color: '#ff7f50',\n            },\n            '& pre': {\n                overflow: 'auto',\n            },\n            '& img': {\n                maxWidth: '100%',\n            },\n        },\n    });\n\ninterface IProps {\n    title: string;\n    image?: string;\n    date: string;\n    content: string;\n    fDelete: VoidFunction;\n    extras?: IMessageExtras;\n    height: (height: number) => void;\n}\n\nclass Message extends React.PureComponent<IProps & WithStyles<typeof styles>> {\n    private node: HTMLDivElement | null = null;\n\n    public componentDidMount = () =>\n        this.props.height(this.node ? this.node.getBoundingClientRect().height : 0);\n\n    private renderContent = () => {\n        const content = this.props.content;\n        switch (contentType(this.props.extras)) {\n            case RenderMode.Markdown:\n                return <Markdown>{content}</Markdown>;\n            case RenderMode.Plain:\n            default:\n                return <span className={this.props.classes.plainContent}>{content}</span>;\n        }\n    };\n\n    public render(): React.ReactNode {\n        const {fDelete, classes, title, date, image} = this.props;\n\n        return (\n            <div className={`${classes.wrapperPadding} message`} ref={(ref) => (this.node = ref)}>\n                <Container style={{display: 'flex'}}>\n                    <div className={classes.imageWrapper}>\n                        {image !== null ? (\n                            <img\n                                src={config.get('url') + image}\n                                alt=\"app logo\"\n                                width=\"70\"\n                                height=\"70\"\n                                className={classes.image}\n                            />\n                        ) : null}\n                    </div>\n                    <div className={classes.messageContentWrapper}>\n                        <div className={classes.header}>\n                            <Typography className={`${classes.headerTitle} title`} variant=\"h5\">\n                                {title}\n                            </Typography>\n                            <Typography variant=\"body1\" className={classes.date}>\n                                <TimeAgo date={date} />\n                            </Typography>\n                            <IconButton onClick={fDelete} className={`${classes.trash} delete`}>\n                                <Delete />\n                            </IconButton>\n                        </div>\n                        <Typography component=\"div\" className={`${classes.content} content`}>\n                            {this.renderContent()}\n                        </Typography>\n                    </div>\n                </Container>\n            </div>\n        );\n    }\n}\n\nexport default withStyles(styles, {withTheme: true})(Message);\n","import CircularProgress from '@material-ui/core/CircularProgress';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport React, {Component} from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport DefaultPage from '../common/DefaultPage';\nimport Button from '@material-ui/core/Button';\nimport Message from './Message';\nimport {observer} from 'mobx-react';\nimport {inject, Stores} from '../inject';\nimport {observable} from 'mobx';\nimport ReactInfinite from 'react-infinite';\nimport {IMessage} from '../types';\n\ntype IProps = RouteComponentProps<{id: string}>;\n\ninterface IState {\n    appId: number;\n}\n\n@observer\nclass Messages extends Component<IProps & Stores<'messagesStore' | 'appStore'>, IState> {\n    @observable\n    private heights: Record<string, number> = {};\n\n    private static appId(props: IProps) {\n        if (props === undefined) {\n            return -1;\n        }\n        const {match} = props;\n        return match.params.id !== undefined ? parseInt(match.params.id, 10) : -1;\n    }\n\n    public state = {appId: -1};\n\n    private isLoadingMore = false;\n\n    public componentWillReceiveProps(nextProps: IProps & Stores<'messagesStore' | 'appStore'>) {\n        this.updateAllWithProps(nextProps);\n    }\n\n    public componentWillMount() {\n        window.onscroll = () => {\n            if (\n                window.innerHeight + window.pageYOffset >=\n                document.body.offsetHeight - window.innerHeight * 2\n            ) {\n                this.checkIfLoadMore();\n            }\n        };\n        this.updateAll();\n    }\n\n    public render() {\n        const {appId} = this.state;\n        const {messagesStore, appStore} = this.props;\n        const messages = messagesStore.get(appId);\n        const hasMore = messagesStore.canLoadMore(appId);\n        const name = appStore.getName(appId);\n        const hasMessages = messages.length !== 0;\n\n        return (\n            <DefaultPage\n                title={name}\n                rightControl={\n                    <div>\n                        <Button\n                            id=\"refresh-all\"\n                            variant=\"contained\"\n                            disabled={!hasMessages}\n                            color=\"primary\"\n                            onClick={() => messagesStore.refreshByApp(appId)}\n                            style={{marginRight: 5}}\n                        >\n                            Refresh\n                        </Button>\n                        <Button\n                            id=\"delete-all\"\n                            variant=\"contained\"\n                            disabled={!hasMessages}\n                            color=\"primary\"\n                            onClick={() => messagesStore.removeByApp(appId)}\n                        >\n                            Delete All\n                        </Button>\n                    </div>\n                }\n            >\n                {hasMessages ? (\n                    <div style={{width: '100%'}} id=\"messages\">\n                        <ReactInfinite\n                            key={appId}\n                            useWindowAsScrollContainer\n                            preloadBatchSize={window.innerHeight * 3}\n                            elementHeight={messages.map((m) => this.heights[m.id] || 1)}\n                        >\n                            {messages.map(this.renderMessage)}\n                        </ReactInfinite>\n\n                        {hasMore ? (\n                            <Grid item xs={12} style={{textAlign: 'center'}}>\n                                <CircularProgress size={100} />\n                            </Grid>\n                        ) : (\n                            this.label(\"You've reached the end\")\n                        )}\n                    </div>\n                ) : (\n                    this.label('No messages')\n                )}\n            </DefaultPage>\n        );\n    }\n\n    private updateAllWithProps = (props: IProps & Stores<'messagesStore'>) => {\n        const appId = Messages.appId(props);\n        this.setState({appId});\n        if (!props.messagesStore.exists(appId)) {\n            props.messagesStore.loadMore(appId);\n        }\n    };\n\n    private updateAll = () => this.updateAllWithProps(this.props);\n\n    private deleteMessage = (message: IMessage) => () =>\n        this.props.messagesStore.removeSingle(message);\n\n    private renderMessage = (message: IMessage) => (\n        <Message\n            key={message.id}\n            height={(height: number) => {\n                if (!this.heights[message.id]) {\n                    this.heights[message.id] = height;\n                }\n            }}\n            fDelete={this.deleteMessage(message)}\n            title={message.title}\n            date={message.date}\n            content={message.message}\n            image={message.image}\n            extras={message.extras}\n        />\n    );\n\n    private checkIfLoadMore() {\n        const {appId} = this.state;\n        if (!this.isLoadingMore && this.props.messagesStore.canLoadMore(appId)) {\n            this.isLoadingMore = true;\n            this.props.messagesStore.loadMore(appId).then(() => (this.isLoadingMore = false));\n        }\n    }\n\n    private label = (text: string) => (\n        <Grid item xs={12}>\n            <Typography variant=\"caption\" component=\"div\" gutterBottom align=\"center\">\n                {text}\n            </Typography>\n        </Grid>\n    );\n}\n\nexport default inject('messagesStore', 'appStore')(Messages);\n","import Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Switch from '@material-ui/core/Switch';\nimport TextField from '@material-ui/core/TextField';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport React, {ChangeEvent, Component} from 'react';\n\ninterface IProps {\n    name?: string;\n    admin?: boolean;\n    fClose: VoidFunction;\n    fOnSubmit: (name: string, pass: string, admin: boolean) => void;\n    isEdit?: boolean;\n}\n\ninterface IState {\n    name: string;\n    pass: string;\n    admin: boolean;\n}\n\nexport default class AddEditDialog extends Component<IProps, IState> {\n    public state = {\n        name: this.props.name ?? '',\n        pass: '',\n        admin: this.props.admin ?? false,\n    };\n\n    public render() {\n        const {fClose, fOnSubmit, isEdit} = this.props;\n        const {name, pass, admin} = this.state;\n        const namePresent = this.state.name.length !== 0;\n        const passPresent = this.state.pass.length !== 0 || isEdit;\n        const submitAndClose = () => {\n            fOnSubmit(name, pass, admin);\n            fClose();\n        };\n        return (\n            <Dialog\n                open={true}\n                onClose={fClose}\n                aria-labelledby=\"form-dialog-title\"\n                id=\"add-edit-user-dialog\"\n            >\n                <DialogTitle id=\"form-dialog-title\">\n                    {isEdit ? 'Edit ' + this.props.name : 'Add a user'}\n                </DialogTitle>\n                <DialogContent>\n                    <TextField\n                        autoFocus\n                        margin=\"dense\"\n                        className=\"name\"\n                        label=\"Name *\"\n                        type=\"email\"\n                        value={name}\n                        onChange={this.handleChange.bind(this, 'name')}\n                        fullWidth\n                    />\n                    <TextField\n                        margin=\"dense\"\n                        className=\"password\"\n                        type=\"password\"\n                        value={pass}\n                        fullWidth\n                        label={isEdit ? 'Pass (empty if no change)' : 'Pass *'}\n                        onChange={this.handleChange.bind(this, 'pass')}\n                    />\n                    <FormControlLabel\n                        control={\n                            <Switch\n                                checked={admin}\n                                className=\"admin-rights\"\n                                onChange={this.handleChecked.bind(this, 'admin')}\n                                value=\"admin\"\n                            />\n                        }\n                        label=\"has administrator rights\"\n                    />\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={fClose}>Cancel</Button>\n                    <Tooltip\n                        placement={'bottom-start'}\n                        title={\n                            namePresent\n                                ? passPresent\n                                    ? ''\n                                    : 'password is required'\n                                : 'name is required'\n                        }\n                    >\n                        <div>\n                            <Button\n                                className=\"save-create\"\n                                disabled={!passPresent || !namePresent}\n                                onClick={submitAndClose}\n                                color=\"primary\"\n                                variant=\"contained\"\n                            >\n                                {isEdit ? 'Save' : 'Create'}\n                            </Button>\n                        </div>\n                    </Tooltip>\n                </DialogActions>\n            </Dialog>\n        );\n    }\n\n    private handleChange(propertyName: string, event: ChangeEvent<HTMLInputElement>) {\n        const state = this.state;\n        state[propertyName] = event.target.value;\n        this.setState(state);\n    }\n\n    private handleChecked(propertyName: string, event: ChangeEvent<HTMLInputElement>) {\n        const state = this.state;\n        state[propertyName] = event.target.checked;\n        this.setState(state);\n    }\n}\n","import Grid from '@material-ui/core/Grid';\nimport IconButton from '@material-ui/core/IconButton';\nimport Paper from '@material-ui/core/Paper';\nimport {withStyles, WithStyles} from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Delete from '@material-ui/icons/Delete';\nimport Edit from '@material-ui/icons/Edit';\nimport React, {Component, SFC} from 'react';\nimport ConfirmDialog from '../common/ConfirmDialog';\nimport DefaultPage from '../common/DefaultPage';\nimport Button from '@material-ui/core/Button';\nimport AddEditDialog from './AddEditUserDialog';\nimport {observer} from 'mobx-react';\nimport {observable} from 'mobx';\nimport {inject, Stores} from '../inject';\nimport {IUser} from '../types';\n\nconst styles = () => ({\n    wrapper: {\n        margin: '0 auto',\n        maxWidth: 700,\n    },\n});\n\ninterface IRowProps {\n    name: string;\n    admin: boolean;\n    fDelete: VoidFunction;\n    fEdit: VoidFunction;\n}\n\nconst UserRow: SFC<IRowProps> = ({name, admin, fDelete, fEdit}) => (\n    <TableRow>\n        <TableCell>{name}</TableCell>\n        <TableCell>{admin ? 'Yes' : 'No'}</TableCell>\n        <TableCell align=\"right\" padding=\"none\">\n            <IconButton onClick={fEdit} className=\"edit\">\n                <Edit />\n            </IconButton>\n            <IconButton onClick={fDelete} className=\"delete\">\n                <Delete />\n            </IconButton>\n        </TableCell>\n    </TableRow>\n);\n\n@observer\nclass Users extends Component<WithStyles<'wrapper'> & Stores<'userStore'>> {\n    @observable\n    private createDialog = false;\n    @observable\n    private deleteId: number | false = false;\n    @observable\n    private editId: number | false = false;\n\n    public componentDidMount = () => this.props.userStore.refresh();\n\n    public render() {\n        const {\n            deleteId,\n            editId,\n            createDialog,\n            props: {userStore},\n        } = this;\n        const users = userStore.getItems();\n        return (\n            <DefaultPage\n                title=\"Users\"\n                rightControl={\n                    <Button\n                        id=\"create-user\"\n                        variant=\"contained\"\n                        color=\"primary\"\n                        onClick={() => (this.createDialog = true)}\n                    >\n                        Create User\n                    </Button>\n                }\n            >\n                <Grid item xs={12}>\n                    <Paper elevation={6}>\n                        <Table id=\"user-table\">\n                            <TableHead>\n                                <TableRow style={{textAlign: 'center'}}>\n                                    <TableCell>Name</TableCell>\n                                    <TableCell>Admin</TableCell>\n                                    <TableCell />\n                                </TableRow>\n                            </TableHead>\n                            <TableBody>\n                                {users.map((user: IUser) => (\n                                    <UserRow\n                                        key={user.id}\n                                        name={user.name}\n                                        admin={user.admin}\n                                        fDelete={() => (this.deleteId = user.id)}\n                                        fEdit={() => (this.editId = user.id)}\n                                    />\n                                ))}\n                            </TableBody>\n                        </Table>\n                    </Paper>\n                </Grid>\n                {createDialog && (\n                    <AddEditDialog\n                        fClose={() => (this.createDialog = false)}\n                        fOnSubmit={userStore.create}\n                    />\n                )}\n                {editId !== false && (\n                    <AddEditDialog\n                        fClose={() => (this.editId = false)}\n                        fOnSubmit={userStore.update.bind(this, editId)}\n                        name={userStore.getByID(editId).name}\n                        admin={userStore.getByID(editId).admin}\n                        isEdit={true}\n                    />\n                )}\n                {deleteId !== false && (\n                    <ConfirmDialog\n                        title=\"Confirm Delete\"\n                        text={'Delete ' + userStore.getByID(deleteId).name + '?'}\n                        fClose={() => (this.deleteId = false)}\n                        fOnSubmit={() => userStore.remove(deleteId)}\n                    />\n                )}\n            </DefaultPage>\n        );\n    }\n}\n\nexport default withStyles(styles)(inject('userStore')(Users));\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\n\ninterface ConnectionErrorBannerProps {\n    height: number;\n    retry: () => void;\n    message: string;\n}\n\nexport const ConnectionErrorBanner = ({height, retry, message}: ConnectionErrorBannerProps) => (\n    <div\n        style={{\n            backgroundColor: '#e74c3c',\n            height,\n            width: '100%',\n            zIndex: 1300,\n            position: 'relative',\n        }}\n    >\n        <Typography align=\"center\" variant=\"h6\" style={{lineHeight: `${height}px`}}>\n            {message}{' '}\n            <Button variant=\"outlined\" onClick={retry}>\n                Retry\n            </Button>\n        </Typography>\n    </div>\n);\n","import {createMuiTheme, MuiThemeProvider, Theme, WithStyles, withStyles} from '@material-ui/core';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport * as React from 'react';\nimport {HashRouter, Redirect, Route, Switch} from 'react-router-dom';\nimport Header from './Header';\nimport LoadingSpinner from '../common/LoadingSpinner';\nimport Navigation from './Navigation';\nimport ScrollUpButton from '../common/ScrollUpButton';\nimport SettingsDialog from '../common/SettingsDialog';\nimport SnackBarHandler from '../snack/SnackBarHandler';\nimport * as config from '../config';\nimport Applications from '../application/Applications';\nimport Clients from '../client/Clients';\nimport Plugins from '../plugin/Plugins';\nimport PluginDetailView from '../plugin/PluginDetailView';\nimport Login from '../user/Login';\nimport Messages from '../message/Messages';\nimport Users from '../user/Users';\nimport {observer} from 'mobx-react';\nimport {observable} from 'mobx';\nimport {inject, Stores} from '../inject';\nimport {ConnectionErrorBanner} from '../common/ConnectionErrorBanner';\n\nconst styles = (theme: Theme) => ({\n    content: {\n        margin: '0 auto',\n        marginTop: 64,\n        padding: theme.spacing(4),\n        width: '100%',\n        [theme.breakpoints.down('xs')]: {\n            marginTop: 0,\n        },\n    },\n});\n\nconst localStorageThemeKey = 'gotify-theme';\ntype ThemeKey = 'dark' | 'light';\nconst themeMap: Record<ThemeKey, Theme> = {\n    light: createMuiTheme({\n        palette: {\n            type: 'light',\n        },\n    }),\n    dark: createMuiTheme({\n        palette: {\n            type: 'dark',\n        },\n    }),\n};\n\nconst isThemeKey = (value: string | null): value is ThemeKey =>\n    value === 'light' || value === 'dark';\n\n@observer\nclass Layout extends React.Component<\n    WithStyles<'content'> & Stores<'currentUser' | 'snackManager'>\n> {\n    @observable\n    private currentTheme: ThemeKey = 'dark';\n    @observable\n    private showSettings = false;\n    @observable\n    private navOpen = false;\n\n    private setNavOpen(open: boolean) {\n        this.navOpen = open;\n    }\n\n    public componentDidMount() {\n        const localStorageTheme = window.localStorage.getItem(localStorageThemeKey);\n        if (isThemeKey(localStorageTheme)) {\n            this.currentTheme = localStorageTheme;\n        } else {\n            window.localStorage.setItem(localStorageThemeKey, this.currentTheme);\n        }\n    }\n\n    public render() {\n        const {showSettings, currentTheme} = this;\n        const {\n            classes,\n            currentUser: {\n                loggedIn,\n                authenticating,\n                user: {name, admin},\n                logout,\n                tryReconnect,\n                connectionErrorMessage,\n            },\n        } = this.props;\n        const theme = themeMap[currentTheme];\n        const loginRoute = () => (loggedIn ? <Redirect to=\"/\" /> : <Login />);\n        const {version} = config.get('version');\n        return (\n            <MuiThemeProvider theme={theme}>\n                <HashRouter>\n                    <div>\n                        {!connectionErrorMessage ? null : (\n                            <ConnectionErrorBanner\n                                height={64}\n                                retry={() => tryReconnect()}\n                                message={connectionErrorMessage}\n                            />\n                        )}\n                        <div style={{display: 'flex', flexDirection: 'column'}}>\n                            <CssBaseline />\n                            <Header\n                                style={{top: !connectionErrorMessage ? 0 : 64}}\n                                admin={admin}\n                                name={name}\n                                version={version}\n                                loggedIn={loggedIn}\n                                toggleTheme={this.toggleTheme.bind(this)}\n                                showSettings={() => (this.showSettings = true)}\n                                logout={logout}\n                                setNavOpen={this.setNavOpen.bind(this)}\n                            />\n                            <div style={{display: 'flex'}}>\n                                <Navigation\n                                    loggedIn={loggedIn}\n                                    navOpen={this.navOpen}\n                                    setNavOpen={this.setNavOpen.bind(this)}\n                                />\n                                <main className={classes.content}>\n                                    <Switch>\n                                        {authenticating ? (\n                                            <Route path=\"/\">\n                                                <LoadingSpinner />\n                                            </Route>\n                                        ) : null}\n                                        <Route exact path=\"/login\" render={loginRoute} />\n                                        {loggedIn ? null : <Redirect to=\"/login\" />}\n                                        <Route exact path=\"/\" component={Messages} />\n                                        <Route exact path=\"/messages/:id\" component={Messages} />\n                                        <Route\n                                            exact\n                                            path=\"/applications\"\n                                            component={Applications}\n                                        />\n                                        <Route exact path=\"/clients\" component={Clients} />\n                                        <Route exact path=\"/users\" component={Users} />\n                                        <Route exact path=\"/plugins\" component={Plugins} />\n                                        <Route\n                                            exact\n                                            path=\"/plugins/:id\"\n                                            component={PluginDetailView}\n                                        />\n                                    </Switch>\n                                </main>\n                            </div>\n                            {showSettings && (\n                                <SettingsDialog fClose={() => (this.showSettings = false)} />\n                            )}\n                            <ScrollUpButton />\n                            <SnackBarHandler />\n                        </div>\n                    </div>\n                </HashRouter>\n            </MuiThemeProvider>\n        );\n    }\n\n    private toggleTheme() {\n        this.currentTheme = this.currentTheme === 'dark' ? 'light' : 'dark';\n        localStorage.setItem(localStorageThemeKey, this.currentTheme);\n    }\n}\n\nexport default withStyles(styles, {withTheme: true})(inject('currentUser', 'snackManager')(Layout));\n","import axios, {AxiosError, AxiosResponse} from 'axios';\nimport * as config from './config';\nimport {Base64} from 'js-base64';\nimport {detect} from 'detect-browser';\nimport {SnackReporter} from './snack/SnackManager';\nimport {observable} from 'mobx';\nimport {IClient, IUser} from './types';\n\nconst tokenKey = 'gotify-login-key';\n\nexport class CurrentUser {\n    private tokenCache: string | null = null;\n    private reconnectTimeoutId: number | null = null;\n    private reconnectTime = 7500;\n    @observable\n    public loggedIn = false;\n    @observable\n    public authenticating = false;\n    @observable\n    public user: IUser = {name: 'unknown', admin: false, id: -1};\n    @observable\n    public connectionErrorMessage: string | null = null;\n\n    public constructor(private readonly snack: SnackReporter) {}\n\n    public token = (): string => {\n        if (this.tokenCache !== null) {\n            return this.tokenCache;\n        }\n\n        const localStorageToken = window.localStorage.getItem(tokenKey);\n        if (localStorageToken) {\n            this.tokenCache = localStorageToken;\n            return localStorageToken;\n        }\n\n        return '';\n    };\n\n    private readonly setToken = (token: string) => {\n        this.tokenCache = token;\n        window.localStorage.setItem(tokenKey, token);\n    };\n\n    public register = async (name: string, pass: string): Promise<boolean> =>\n        axios\n            .create()\n            .post(config.get('url') + 'user', {name, pass})\n            .then(() => {\n                this.snack('User Created. Logging in...');\n                this.login(name, pass);\n                return true;\n            })\n            .catch((error: AxiosError) => {\n                if (!error || !error.response) {\n                    this.snack('No network connection or server unavailable.');\n                    return false;\n                }\n                const {data} = error.response;\n                this.snack(\n                    `Register failed: ${data?.error ?? 'unknown'}: ${data?.errorDescription ?? ''}`\n                );\n                return false;\n            });\n\n    public login = async (username: string, password: string) => {\n        this.loggedIn = false;\n        this.authenticating = true;\n        const browser = detect();\n        const name = (browser && browser.name + ' ' + browser.version) || 'unknown browser';\n        axios\n            .create()\n            .request({\n                url: config.get('url') + 'client',\n                method: 'POST',\n                data: {name},\n                // eslint-disable-next-line @typescript-eslint/naming-convention\n                headers: {Authorization: 'Basic ' + Base64.encode(username + ':' + password)},\n            })\n            .then((resp: AxiosResponse<IClient>) => {\n                this.snack(`A client named '${name}' was created for your session.`);\n                this.setToken(resp.data.token);\n                this.tryAuthenticate()\n                    .then(() => {\n                        this.authenticating = false;\n                        this.loggedIn = true;\n                    })\n                    .catch(() => {\n                        this.authenticating = false;\n                        console.log(\n                            'create client succeeded, but authenticated with given token failed'\n                        );\n                    });\n            })\n            .catch(() => {\n                this.authenticating = false;\n                return this.snack('Login failed');\n            });\n    };\n\n    public tryAuthenticate = async (): Promise<AxiosResponse<IUser>> => {\n        if (this.token() === '') {\n            return Promise.reject();\n        }\n\n        return (\n            axios\n                .create()\n                // eslint-disable-next-line @typescript-eslint/naming-convention\n                .get(config.get('url') + 'current/user', {headers: {'X-Gotify-Key': this.token()}})\n                .then((passThrough) => {\n                    this.user = passThrough.data;\n                    this.loggedIn = true;\n                    this.connectionErrorMessage = null;\n                    this.reconnectTime = 7500;\n                    return passThrough;\n                })\n                .catch((error: AxiosError) => {\n                    if (!error || !error.response) {\n                        this.connectionError('No network connection or server unavailable.');\n                        return Promise.reject(error);\n                    }\n\n                    if (error.response.status >= 500) {\n                        this.connectionError(\n                            `${error.response.statusText} (code: ${error.response.status}).`\n                        );\n                        return Promise.reject(error);\n                    }\n\n                    this.connectionErrorMessage = null;\n\n                    if (error.response.status >= 400 && error.response.status < 500) {\n                        this.logout();\n                    }\n                    return Promise.reject(error);\n                })\n        );\n    };\n\n    public logout = async () => {\n        await axios\n            .get(config.get('url') + 'client')\n            .then((resp: AxiosResponse<IClient[]>) => {\n                resp.data\n                    .filter((client) => client.token === this.tokenCache)\n                    .forEach((client) => axios.delete(config.get('url') + 'client/' + client.id));\n            })\n            .catch(() => Promise.resolve());\n        window.localStorage.removeItem(tokenKey);\n        this.tokenCache = null;\n        this.loggedIn = false;\n    };\n\n    public changePassword = (pass: string) => {\n        axios\n            .post(config.get('url') + 'current/user/password', {pass})\n            .then(() => this.snack('Password changed'));\n    };\n\n    public tryReconnect = (quiet = false) => {\n        this.tryAuthenticate().catch(() => {\n            if (!quiet) {\n                this.snack('Reconnect failed');\n            }\n        });\n    };\n\n    private readonly connectionError = (message: string) => {\n        this.connectionErrorMessage = message;\n        if (this.reconnectTimeoutId !== null) {\n            window.clearTimeout(this.reconnectTimeoutId);\n        }\n        this.reconnectTimeoutId = window.setTimeout(\n            () => this.tryReconnect(true),\n            this.reconnectTime\n        );\n        this.reconnectTime = Math.min(this.reconnectTime * 2, 120000);\n    };\n}\n","import {action, observable} from 'mobx';\n\ninterface HasID {\n    id: number;\n}\n\nexport interface IClearable {\n    clear(): void;\n}\n\n/**\n * Base implementation for handling items with ids.\n */\nexport abstract class BaseStore<T extends HasID> implements IClearable {\n    @observable\n    protected items: T[] = [];\n\n    protected abstract requestItems(): Promise<T[]>;\n\n    protected abstract requestDelete(id: number): Promise<void>;\n\n    @action\n    public remove = async (id: number): Promise<void> => {\n        await this.requestDelete(id);\n        await this.refresh();\n    };\n\n    @action\n    public refresh = async (): Promise<void> => {\n        this.items = await this.requestItems().then((items) => items || []);\n    };\n\n    public getByID = (id: number): T => {\n        const item = this.getByIDOrUndefined(id);\n        if (item === undefined) {\n            throw new Error('cannot find item with id ' + id);\n        }\n        return item;\n    };\n\n    public getByIDOrUndefined = (id: number): T | undefined =>\n        this.items.find((hasId: HasID) => hasId.id === id);\n\n    public getItems = (): T[] => this.items;\n\n    @action\n    public clear = (): void => {\n        this.items = [];\n    };\n}\n","import {BaseStore} from '../common/BaseStore';\nimport axios from 'axios';\nimport * as config from '../config';\nimport {action} from 'mobx';\nimport {SnackReporter} from '../snack/SnackManager';\nimport {IApplication} from '../types';\n\nexport class AppStore extends BaseStore<IApplication> {\n    public onDelete: () => void = () => {};\n\n    public constructor(private readonly snack: SnackReporter) {\n        super();\n    }\n\n    protected requestItems = (): Promise<IApplication[]> =>\n        axios\n            .get<IApplication[]>(`${config.get('url')}application`)\n            .then((response) => response.data);\n\n    protected requestDelete = (id: number): Promise<void> =>\n        axios.delete(`${config.get('url')}application/${id}`).then(() => {\n            this.onDelete();\n            return this.snack('Application deleted');\n        });\n\n    @action\n    public uploadImage = async (id: number, file: Blob): Promise<void> => {\n        const formData = new FormData();\n        formData.append('file', file);\n        await axios.post(`${config.get('url')}application/${id}/image`, formData, {\n            headers: {'content-type': 'multipart/form-data'},\n        });\n        await this.refresh();\n        this.snack('Application image updated');\n    };\n\n    @action\n    public update = async (id: number, name: string, description: string): Promise<void> => {\n        await axios.put(`${config.get('url')}application/${id}`, {name, description});\n        await this.refresh();\n        this.snack('Application updated');\n    };\n\n    @action\n    public create = async (name: string, description: string): Promise<void> => {\n        await axios.post(`${config.get('url')}application`, {name, description});\n        await this.refresh();\n        this.snack('Application created');\n    };\n\n    public getName = (id: number): string => {\n        const app = this.getByIDOrUndefined(id);\n        return id === -1 ? 'All Messages' : app !== undefined ? app.name : 'unknown';\n    };\n}\n","import {SnackReporter} from '../snack/SnackManager';\nimport {CurrentUser} from '../CurrentUser';\nimport * as config from '../config';\nimport {AxiosError} from 'axios';\nimport {IMessage} from '../types';\n\nexport class WebSocketStore {\n    private wsActive = false;\n    private ws: WebSocket | null = null;\n\n    public constructor(\n        private readonly snack: SnackReporter,\n        private readonly currentUser: CurrentUser\n    ) {}\n\n    public listen = (callback: (msg: IMessage) => void) => {\n        if (!this.currentUser.token() || this.wsActive) {\n            return;\n        }\n        this.wsActive = true;\n\n        const wsUrl = config.get('url').replace('http', 'ws').replace('https', 'wss');\n        const ws = new WebSocket(wsUrl + 'stream?token=' + this.currentUser.token());\n\n        ws.onerror = (e) => {\n            this.wsActive = false;\n            console.log('WebSocket connection errored', e);\n        };\n\n        ws.onmessage = (data) => callback(JSON.parse(data.data));\n\n        ws.onclose = () => {\n            this.wsActive = false;\n            this.currentUser\n                .tryAuthenticate()\n                .then(() => {\n                    this.snack('WebSocket connection closed, trying again in 30 seconds.');\n                    setTimeout(() => this.listen(callback), 30000);\n                })\n                .catch((error: AxiosError) => {\n                    if (error?.response?.status === 401) {\n                        this.snack('Could not authenticate with client token, logging out.');\n                    }\n                });\n        };\n\n        this.ws = ws;\n    };\n\n    public close = () => this.ws?.close(1000, 'WebSocketStore#close');\n}\n","import {action, observable} from 'mobx';\n\nexport interface SnackReporter {\n    (message: string): void;\n}\n\nexport class SnackManager {\n    @observable\n    private messages: string[] = [];\n    @observable\n    public message: string | null = null;\n    @observable\n    public counter = 0;\n\n    @action\n    public next = (): void => {\n        if (!this.hasNext()) {\n            throw new Error('There is nothing here :(');\n        }\n        this.message = this.messages.shift() as string;\n    };\n\n    public hasNext = () => this.messages.length > 0;\n\n    @action\n    public snack: SnackReporter = (message: string): void => {\n        this.messages.push(message);\n        this.counter++;\n    };\n}\n","import {BaseStore} from '../common/BaseStore';\nimport axios from 'axios';\nimport * as config from '../config';\nimport {action} from 'mobx';\nimport {SnackReporter} from '../snack/SnackManager';\nimport {IUser} from '../types';\n\nexport class UserStore extends BaseStore<IUser> {\n    constructor(private readonly snack: SnackReporter) {\n        super();\n    }\n\n    protected requestItems = (): Promise<IUser[]> =>\n        axios.get<IUser[]>(`${config.get('url')}user`).then((response) => response.data);\n\n    protected requestDelete(id: number): Promise<void> {\n        return axios\n            .delete(`${config.get('url')}user/${id}`)\n            .then(() => this.snack('User deleted'));\n    }\n\n    @action\n    public create = async (name: string, pass: string, admin: boolean) => {\n        await axios.post(`${config.get('url')}user`, {name, pass, admin});\n        await this.refresh();\n        this.snack('User created');\n    };\n\n    @action\n    public update = async (id: number, name: string, pass: string | null, admin: boolean) => {\n        await axios.post(config.get('url') + 'user/' + id, {name, pass, admin});\n        await this.refresh();\n        this.snack('User updated');\n    };\n}\n","import {BaseStore} from '../common/BaseStore';\nimport {action, IObservableArray, observable, reaction} from 'mobx';\nimport axios, {AxiosResponse} from 'axios';\nimport * as config from '../config';\nimport {createTransformer} from 'mobx-utils';\nimport {SnackReporter} from '../snack/SnackManager';\nimport {IApplication, IMessage, IPagedMessages} from '../types';\n\nconst AllMessages = -1;\n\ninterface MessagesState {\n    messages: IObservableArray<IMessage>;\n    hasMore: boolean;\n    nextSince: number;\n    loaded: boolean;\n}\n\nexport class MessagesStore {\n    @observable\n    private state: Record<string, MessagesState> = {};\n\n    private loading = false;\n\n    public constructor(\n        private readonly appStore: BaseStore<IApplication>,\n        private readonly snack: SnackReporter\n    ) {\n        reaction(() => appStore.getItems(), this.createEmptyStatesForApps);\n    }\n\n    private stateOf = (appId: number, create = true) => {\n        if (!this.state[appId] && create) {\n            this.state[appId] = this.emptyState();\n        }\n        return this.state[appId] || this.emptyState();\n    };\n\n    public canLoadMore = (appId: number) => this.stateOf(appId, /*create*/ false).hasMore;\n\n    @action\n    public loadMore = async (appId: number) => {\n        const state = this.stateOf(appId);\n        if (!state.hasMore || this.loading) {\n            return Promise.resolve();\n        }\n        this.loading = true;\n\n        const pagedResult = await this.fetchMessages(appId, state.nextSince).then(\n            (resp) => resp.data\n        );\n\n        state.messages.replace([...state.messages, ...pagedResult.messages]);\n        state.nextSince = pagedResult.paging.since ?? 0;\n        state.hasMore = 'next' in pagedResult.paging;\n        state.loaded = true;\n        this.loading = false;\n        return Promise.resolve();\n    };\n\n    @action\n    public publishSingleMessage = (message: IMessage) => {\n        if (this.exists(AllMessages)) {\n            this.stateOf(AllMessages).messages.unshift(message);\n        }\n        if (this.exists(message.appid)) {\n            this.stateOf(message.appid).messages.unshift(message);\n        }\n    };\n\n    @action\n    public removeByApp = async (appId: number) => {\n        if (appId === AllMessages) {\n            await axios.delete(config.get('url') + 'message');\n            this.snack('Deleted all messages');\n            this.clearAll();\n        } else {\n            await axios.delete(config.get('url') + 'application/' + appId + '/message');\n            this.snack(`Deleted all messages from ${this.appStore.getByID(appId).name}`);\n            this.clear(AllMessages);\n            this.clear(appId);\n        }\n        await this.loadMore(appId);\n    };\n\n    @action\n    public removeSingle = async (message: IMessage) => {\n        await axios.delete(config.get('url') + 'message/' + message.id);\n        if (this.exists(AllMessages)) {\n            this.removeFromList(this.state[AllMessages].messages, message);\n        }\n        if (this.exists(message.appid)) {\n            this.removeFromList(this.state[message.appid].messages, message);\n        }\n        this.snack('Message deleted');\n    };\n\n    @action\n    public clearAll = () => {\n        this.state = {};\n        this.createEmptyStatesForApps(this.appStore.getItems());\n    };\n\n    @action\n    public refreshByApp = async (appId: number) => {\n        this.clearAll();\n        this.loadMore(appId);\n    };\n\n    public exists = (id: number) => this.stateOf(id).loaded;\n\n    private removeFromList(messages: IMessage[], messageToDelete: IMessage): false | number {\n        if (messages) {\n            const index = messages.findIndex((message) => message.id === messageToDelete.id);\n            if (index !== -1) {\n                messages.splice(index, 1);\n                return index;\n            }\n        }\n        return false;\n    }\n\n    private clear = (appId: number) => (this.state[appId] = this.emptyState());\n\n    private fetchMessages = (\n        appId: number,\n        since: number\n    ): Promise<AxiosResponse<IPagedMessages>> => {\n        if (appId === AllMessages) {\n            return axios.get(config.get('url') + 'message?since=' + since);\n        } else {\n            return axios.get(\n                config.get('url') + 'application/' + appId + '/message?since=' + since\n            );\n        }\n    };\n\n    private getUnCached = (appId: number): Array<IMessage & {image: string | null}> => {\n        const appToImage = this.appStore\n            .getItems()\n            .reduce((all, app) => ({...all, [app.id]: app.image}), {});\n\n        return this.stateOf(appId, false).messages.map((message: IMessage) => ({\n            ...message,\n            image: appToImage[message.appid] || null,\n        }));\n    };\n\n    public get = createTransformer(this.getUnCached);\n\n    private clearCache = () => (this.get = createTransformer(this.getUnCached));\n\n    private createEmptyStatesForApps = (apps: IApplication[]) => {\n        apps.map((app) => app.id).forEach((id) => this.stateOf(id, /*create*/ true));\n        this.clearCache();\n    };\n\n    private emptyState = (): MessagesState => ({\n        messages: observable.array(),\n        hasMore: true,\n        nextSince: 0,\n        loaded: false,\n    });\n}\n","import {BaseStore} from '../common/BaseStore';\nimport axios from 'axios';\nimport * as config from '../config';\nimport {action} from 'mobx';\nimport {SnackReporter} from '../snack/SnackManager';\nimport {IClient} from '../types';\n\nexport class ClientStore extends BaseStore<IClient> {\n    public constructor(private readonly snack: SnackReporter) {\n        super();\n    }\n\n    protected requestItems = (): Promise<IClient[]> =>\n        axios.get<IClient[]>(`${config.get('url')}client`).then((response) => response.data);\n\n    protected requestDelete(id: number): Promise<void> {\n        return axios\n            .delete(`${config.get('url')}client/${id}`)\n            .then(() => this.snack('Client deleted'));\n    }\n\n    @action\n    public update = async (id: number, name: string): Promise<void> => {\n        await axios.put(`${config.get('url')}client/${id}`, {name});\n        await this.refresh();\n        this.snack('Client updated');\n    };\n\n    @action\n    public createNoNotifcation = async (name: string): Promise<IClient> => {\n        const client = await axios.post(`${config.get('url')}client`, {name});\n        await this.refresh();\n        return client.data;\n    };\n\n    @action\n    public create = async (name: string): Promise<void> => {\n        await this.createNoNotifcation(name);\n        this.snack('Client added');\n    };\n}\n","import axios from 'axios';\nimport {action} from 'mobx';\nimport {BaseStore} from '../common/BaseStore';\nimport * as config from '../config';\nimport {SnackReporter} from '../snack/SnackManager';\nimport {IPlugin} from '../types';\n\nexport class PluginStore extends BaseStore<IPlugin> {\n    public onDelete: () => void = () => {};\n\n    public constructor(private readonly snack: SnackReporter) {\n        super();\n    }\n\n    public requestConfig = (id: number): Promise<string> =>\n        axios.get(`${config.get('url')}plugin/${id}/config`).then((response) => response.data);\n\n    public requestDisplay = (id: number): Promise<string> =>\n        axios.get(`${config.get('url')}plugin/${id}/display`).then((response) => response.data);\n\n    protected requestItems = (): Promise<IPlugin[]> =>\n        axios.get<IPlugin[]>(`${config.get('url')}plugin`).then((response) => response.data);\n\n    protected requestDelete = (): Promise<void> => {\n        this.snack('Cannot delete plugin');\n        throw new Error('Cannot delete plugin');\n    };\n\n    public getName = (id: number): string => {\n        const plugin = this.getByIDOrUndefined(id);\n        return id === -1 ? 'All Plugins' : plugin !== undefined ? plugin.name : 'unknown';\n    };\n\n    @action\n    public changeConfig = async (id: number, newConfig: string): Promise<void> => {\n        await axios.post(`${config.get('url')}plugin/${id}/config`, newConfig, {\n            headers: {'content-type': 'application/x-yaml'},\n        });\n        this.snack(`Plugin config updated`);\n        await this.refresh();\n    };\n\n    @action\n    public changeEnabledState = async (id: number, enabled: boolean): Promise<void> => {\n        await axios.post(`${config.get('url')}plugin/${id}/${enabled ? 'enable' : 'disable'}`);\n        this.snack(`Plugin ${enabled ? 'enabled' : 'disabled'}`);\n        await this.refresh();\n    };\n}\n","import {StoreMapping} from './inject';\nimport {reaction} from 'mobx';\nimport * as Notifications from './snack/browserNotification';\n\nexport const registerReactions = (stores: StoreMapping) => {\n    const clearAll = () => {\n        stores.messagesStore.clearAll();\n        stores.appStore.clear();\n        stores.clientStore.clear();\n        stores.userStore.clear();\n        stores.wsStore.close();\n    };\n    const loadAll = () => {\n        stores.wsStore.listen((message) => {\n            stores.messagesStore.publishSingleMessage(message);\n            Notifications.notifyNewMessage(message);\n            if (message.priority >= 4) {\n                const src = 'static/notification.ogg';\n                const audio = new Audio(src);\n                audio.play();\n            }\n        });\n        stores.appStore.refresh();\n    };\n\n    reaction(\n        () => stores.currentUser.loggedIn,\n        (loggedIn) => {\n            if (loggedIn) {\n                loadAll();\n            } else {\n                clearAll();\n            }\n        }\n    );\n\n    reaction(\n        () => stores.currentUser.connectionErrorMessage,\n        (connectionErrorMessage) => {\n            if (!connectionErrorMessage) {\n                clearAll();\n                loadAll();\n            }\n        }\n    );\n};\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport 'typeface-roboto';\nimport {initAxios} from './apiAuth';\nimport * as config from './config';\nimport Layout from './layout/Layout';\nimport {unregister} from './registerServiceWorker';\nimport {CurrentUser} from './CurrentUser';\nimport {AppStore} from './application/AppStore';\nimport {WebSocketStore} from './message/WebSocketStore';\nimport {SnackManager} from './snack/SnackManager';\nimport {InjectProvider, StoreMapping} from './inject';\nimport {UserStore} from './user/UserStore';\nimport {MessagesStore} from './message/MessagesStore';\nimport {ClientStore} from './client/ClientStore';\nimport {PluginStore} from './plugin/PluginStore';\nimport {registerReactions} from './reactions';\n\nconst devUrl = 'http://localhost:3000/';\n\nconst {port, hostname, protocol, pathname} = window.location;\nconst slashes = protocol.concat('//');\nconst path = pathname.endsWith('/') ? pathname : pathname.substring(0, pathname.lastIndexOf('/'));\nconst url = slashes.concat(port ? hostname.concat(':', port) : hostname) + path;\nconst urlWithSlash = url.endsWith('/') ? url : url.concat('/');\n\nconst prodUrl = urlWithSlash;\n\nconst initStores = (): StoreMapping => {\n    const snackManager = new SnackManager();\n    const appStore = new AppStore(snackManager.snack);\n    const userStore = new UserStore(snackManager.snack);\n    const messagesStore = new MessagesStore(appStore, snackManager.snack);\n    const currentUser = new CurrentUser(snackManager.snack);\n    const clientStore = new ClientStore(snackManager.snack);\n    const wsStore = new WebSocketStore(snackManager.snack, currentUser);\n    const pluginStore = new PluginStore(snackManager.snack);\n    appStore.onDelete = () => messagesStore.clearAll();\n\n    return {\n        appStore,\n        snackManager,\n        userStore,\n        messagesStore,\n        currentUser,\n        clientStore,\n        wsStore,\n        pluginStore,\n    };\n};\n\n(function clientJS() {\n    if (process.env.NODE_ENV === 'production') {\n        config.set('url', prodUrl);\n    } else {\n        config.set('url', devUrl);\n        config.set('register', true);\n    }\n    const stores = initStores();\n    initAxios(stores.currentUser, stores.snackManager.snack);\n\n    registerReactions(stores);\n\n    stores.currentUser.tryAuthenticate().catch(() => {});\n\n    window.onbeforeunload = () => {\n        stores.wsStore.close();\n    };\n\n    ReactDOM.render(\n        <InjectProvider stores={stores}>\n            <Layout />\n        </InjectProvider>,\n        document.getElementById('root')\n    );\n    unregister();\n})();\n","import axios from 'axios';\nimport {CurrentUser} from './CurrentUser';\nimport {SnackReporter} from './snack/SnackManager';\n\nexport const initAxios = (currentUser: CurrentUser, snack: SnackReporter) => {\n    axios.interceptors.request.use((config) => {\n        config.headers['X-Gotify-Key'] = currentUser.token();\n        return config;\n    });\n\n    axios.interceptors.response.use(undefined, (error) => {\n        if (!error.response) {\n            snack('Gotify server is not reachable, try refreshing the page.');\n            return Promise.reject(error);\n        }\n\n        const status = error.response.status;\n\n        if (status === 401) {\n            currentUser.tryAuthenticate().then(() => snack('Could not complete request.'));\n        }\n\n        if (status === 400 || status === 403 || status === 500) {\n            snack(error.response.data.error + ': ' + error.response.data.errorDescription);\n        }\n\n        return Promise.reject(error);\n    });\n};\n","export function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then((registration) => {\n            registration.unregister();\n        });\n    }\n}\n"],"sourceRoot":""}